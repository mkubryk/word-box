{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import'../../css/accueil.css';import{useLanguage}from'../../store/languageContext';import{useTheme}from'../../store/themeContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Home(){const[word,setWord]=useState(\"\");const[definition,setDefinition]=useState('');const[translatedMot,setTranslatedMot]=useState('');const[translatedDefinition,setTranslatedDefinition]=useState('');const{language,languageData}=useLanguage();const{themeData}=useTheme();// Crée une référence pour l'icône de favoris\nconst favIconRef=useRef(null);// Fonction pour récupérer la définition du mot via l'API DictionaryAPI\nconst fetchDefinitionFromDictionaryAPI=async mot=>{if(!mot)return;const url=`https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;try{var _data$,_data$$meanings$,_data$$meanings$$defi;const response=await fetch(url);const data=await response.json();const def=((_data$=data[0])===null||_data$===void 0?void 0:(_data$$meanings$=_data$.meanings[0])===null||_data$$meanings$===void 0?void 0:(_data$$meanings$$defi=_data$$meanings$.definitions[0])===null||_data$$meanings$$defi===void 0?void 0:_data$$meanings$$defi.definition)||'Définition introuvable';setDefinition(def);}catch(error){console.error(`Erreur lors du chargement de la définition pour ${mot}:`,error);setDefinition('Erreur de chargement');}};// Fonction pour traduire un texte via l'API Google Translate\nconst translateText=async(text,targetLang)=>{const sourceLang='en';const url=`https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;try{var _data$2,_data$2$;const response=await fetch(url);const data=await response.json();return(data===null||data===void 0?void 0:(_data$2=data[0])===null||_data$2===void 0?void 0:(_data$2$=_data$2[0])===null||_data$2$===void 0?void 0:_data$2$[0])||text;}catch(error){console.error('Erreur lors de la traduction:',error);return text;}};// Fonction pour traduire le mot et sa définition\nconst fetchTranslations=async()=>{if(language==='en'){setTranslatedMot(word);setTranslatedDefinition(definition);}else{const translatedMot=await translateText(word,language);const translatedDef=await translateText(definition,language);setTranslatedMot(translatedMot);setTranslatedDefinition(translatedDef);}};// Chercher la définition et la traduction lors de la recherche\nconst SearchWord=async event=>{event.preventDefault();await fetchDefinitionFromDictionaryAPI(word);await fetchTranslations();};useEffect(()=>{if(definition){fetchTranslations();}},[language,definition]);const addFavWords=async()=>{const motFr=language==='en'?await translateText(word,'fr'):translatedMot;const defFr=language==='en'?await translateText(definition,'fr'):translatedDefinition;try{const response=await fetch('http://localhost/word-box/server/routeur.php',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({objet:'Mot_sympa',action:'createWord',nomMot:word,nomMotFr:motFr,definitionMotFR:defFr,definitionMotENG:definition})});if(!response.ok){throw new Error(`Erreur HTTP ! statut : ${response.status}`);}const data=await response.json();console.log('Réponse du webservice:',data);return data.data||[];}catch(error){console.error(\"Erreur lors de l'ajout du mot favori :\",error);return[];}};const addFavWordsToUser=async(login,numMot)=>{try{const response=await fetch('http://localhost/word-box/server/routeur.php',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({objet:'Liste_mot_sympa',action:'createWord',userName:login,numMot:numMot})});if(!response.ok){throw new Error(`Erreur HTTP ! statut : ${response.status}`);}const data=await response.json();console.log('Réponse du webservice:',data);return data.data||[];}catch(error){console.error(\"Erreur lors de la récupération des mots favoris :\",error);return[];}};// Gestion des favoris\nconst supprFavoris=async word=>{const icon=favIconRef.current;// Utilisation de la référence\nlet user=sessionStorage.getItem('userName');// Vérifier si l'utilisateur est connecté\nif(!user){console.error(\"L'utilisateur n'est pas connecté\");window.location.href='/no-account';}if(icon){icon.classList.toggle('bi-suit-heart-fill');icon.classList.toggle('bi-suit-heart');}if(icon.classList.contains('bi-suit-heart-fill')){let word=await addFavWords();console.log('mot :',word);let numMot=word.numMot;await addFavWordsToUser(user,numMot);}};return/*#__PURE__*/_jsx(\"main\",{class:themeData.main,children:/*#__PURE__*/_jsxs(\"div\",{class:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{class:themeData.wrapper+\" fit-box center-text\",children:[/*#__PURE__*/_jsx(\"h2\",{\"data-translate-key\":\"titleSearch\",children:languageData.titleSearch}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:SearchWord,children:[/*#__PURE__*/_jsx(\"div\",{class:themeData.inputBox,children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"search\",name:\"search\",value:word,onChange:event=>setWord(event.target.value),placeholder:languageData.enterWord})}),/*#__PURE__*/_jsx(\"button\",{class:themeData.btn,type:\"submit\",\"data-translate-key\":\"search\",children:languageData.search})]})]}),/*#__PURE__*/_jsx(\"div\",{class:\"result\",children:translatedMot&&/*#__PURE__*/_jsxs(\"div\",{class:\"wrapper fit-box center-text\",children:[/*#__PURE__*/_jsx(\"h1\",{children:translatedMot}),/*#__PURE__*/_jsx(\"i\",{class:\"bi bi-suit-heart\",ref:favIconRef,onClick:()=>supprFavoris(word)}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:languageData.definition}),\" \",translatedDefinition||languageData.loading]})]})})]})});}export default Home;","map":{"version":3,"names":["React","useState","useEffect","useRef","useLanguage","useTheme","jsx","_jsx","jsxs","_jsxs","Home","word","setWord","definition","setDefinition","translatedMot","setTranslatedMot","translatedDefinition","setTranslatedDefinition","language","languageData","themeData","favIconRef","fetchDefinitionFromDictionaryAPI","mot","url","_data$","_data$$meanings$","_data$$meanings$$defi","response","fetch","data","json","def","meanings","definitions","error","console","translateText","text","targetLang","sourceLang","encodeURI","_data$2","_data$2$","fetchTranslations","translatedDef","SearchWord","event","preventDefault","addFavWords","motFr","defFr","method","headers","body","URLSearchParams","objet","action","nomMot","nomMotFr","definitionMotFR","definitionMotENG","ok","Error","status","log","addFavWordsToUser","login","numMot","userName","supprFavoris","icon","current","user","sessionStorage","getItem","window","location","href","classList","toggle","contains","class","main","children","wrapper","titleSearch","onSubmit","inputBox","type","id","name","value","onChange","target","placeholder","enterWord","btn","search","ref","onClick","loading"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot-good-vers/front/src/pages/Home/Home.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport '../../css/accueil.css';\r\nimport { useLanguage } from '../../store/languageContext';\r\nimport { useTheme } from '../../store/themeContext';\r\n\r\nfunction Home() {\r\n  const [word, setWord] = useState(\"\");\r\n  const [definition, setDefinition] = useState('');\r\n  const [translatedMot, setTranslatedMot] = useState('');\r\n  const [translatedDefinition, setTranslatedDefinition] = useState('');\r\n  const { language, languageData } = useLanguage();\r\n  const { themeData } = useTheme();\r\n  // Crée une référence pour l'icône de favoris\r\n  const favIconRef = useRef(null);\r\n\r\n  // Fonction pour récupérer la définition du mot via l'API DictionaryAPI\r\n  const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n    if (!mot) return;\r\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const def = data[0]?.meanings[0]?.definitions[0]?.definition || 'Définition introuvable';\r\n      setDefinition(def);\r\n    } catch (error) {\r\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\r\n      setDefinition('Erreur de chargement');\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire un texte via l'API Google Translate\r\n  const translateText = async (text, targetLang) => {\r\n    const sourceLang = 'en';\r\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      return data?.[0]?.[0]?.[0] || text;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la traduction:', error);\r\n      return text;\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire le mot et sa définition\r\n  const fetchTranslations = async () => {\r\n    if (language === 'en') {\r\n      setTranslatedMot(word);\r\n      setTranslatedDefinition(definition);\r\n    } else {\r\n      const translatedMot = await translateText(word, language);\r\n      const translatedDef = await translateText(definition, language);\r\n      setTranslatedMot(translatedMot);\r\n      setTranslatedDefinition(translatedDef);\r\n    }\r\n  };\r\n\r\n  // Chercher la définition et la traduction lors de la recherche\r\n  const SearchWord = async (event) => {\r\n    event.preventDefault();\r\n    await fetchDefinitionFromDictionaryAPI(word);\r\n    await fetchTranslations();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (definition) {\r\n      fetchTranslations();\r\n    }\r\n  }, [language, definition]);\r\n\r\n  const addFavWords = async () => {\r\n\r\n    const motFr = language === 'en' ? await translateText(word, 'fr') : translatedMot;\r\n    const defFr = language === 'en' ? await translateText(definition, 'fr') : translatedDefinition;\r\n\r\n    try {\r\n      const response = await fetch('http://localhost/word-box/server/routeur.php', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n          objet: 'Mot_sympa',\r\n          action: 'createWord',\r\n          nomMot: word,\r\n          nomMotFr: motFr,\r\n          definitionMotFR: defFr,\r\n          definitionMotENG: definition,\r\n        }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Erreur HTTP ! statut : ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      console.log('Réponse du webservice:', data);\r\n      return data.data || [];\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de l'ajout du mot favori :\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const addFavWordsToUser = async (login, numMot) => {\r\n    try {\r\n      const response = await fetch('http://localhost/word-box/server/routeur.php', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n          objet: 'Liste_mot_sympa',\r\n          action: 'createWord',\r\n          userName: login,\r\n          numMot: numMot,\r\n        }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Erreur HTTP ! statut : ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Réponse du webservice:', data);\r\n      return data.data || [];\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des mots favoris :\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // Gestion des favoris\r\n  const supprFavoris = async (word) => {\r\n    const icon = favIconRef.current; // Utilisation de la référence\r\n    let user = sessionStorage.getItem('userName');\r\n\r\n    // Vérifier si l'utilisateur est connecté\r\n    if (!user) {\r\n      console.error(\"L'utilisateur n'est pas connecté\");\r\n      window.location.href = '/no-account';\r\n    }\r\n\r\n    if (icon) {\r\n      icon.classList.toggle('bi-suit-heart-fill');\r\n      icon.classList.toggle('bi-suit-heart');\r\n    }\r\n    if (icon.classList.contains('bi-suit-heart-fill')) {\r\n      let word = await addFavWords();\r\n      console.log('mot :', word);\r\n      let numMot = word.numMot;\r\n      await addFavWordsToUser(user, numMot);\r\n    } \r\n  };\r\n\r\n  return (\r\n    <main class={themeData.main}>\r\n      <div class=\"container\">\r\n        <div class={themeData.wrapper+\" fit-box center-text\"}>\r\n          <h2 data-translate-key=\"titleSearch\">{languageData.titleSearch}</h2>\r\n          <form onSubmit={SearchWord}>\r\n            <div class={themeData.inputBox}>\r\n              <input\r\n                type=\"text\"\r\n                id=\"search\"\r\n                name=\"search\"\r\n                value={word}\r\n                onChange={(event) => setWord(event.target.value)}\r\n                placeholder={languageData.enterWord}\r\n              />\r\n            </div>\r\n            <button class={themeData.btn} type=\"submit\" data-translate-key=\"search\">{languageData.search}</button>\r\n          </form>\r\n        </div>\r\n\r\n        {/* Affichage des résultats */}\r\n        <div class=\"result\">\r\n          {translatedMot && (\r\n            <div class=\"wrapper fit-box center-text\">\r\n              <h1>{translatedMot}</h1>\r\n              {/* Utilisation de la référence pour l'icône */}\r\n              <i\r\n                class=\"bi bi-suit-heart\"\r\n                ref={favIconRef}\r\n                onClick={() => supprFavoris(word)}\r\n              ></i>\r\n              <p><strong>{languageData.definition}</strong> {translatedDefinition || languageData.loading}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}