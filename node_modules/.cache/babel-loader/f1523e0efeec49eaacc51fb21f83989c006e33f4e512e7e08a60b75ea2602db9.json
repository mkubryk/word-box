{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  // Liste des mots\n  const mots = [{\n    mot: \"Chicken\"\n  }, {\n    mot: \"Glaucous\"\n  }, {\n    mot: \"Pip squeak\"\n  }, {\n    mot: \"Inspiration\"\n  }, {\n    mot: \"Cockerel\"\n  }];\n\n  // État pour stocker les définitions obtenues\n  const [definitions, setDefinitions] = useState({});\n  let langCurrent = localStorage.getItem(\"lang\") || \"fr\";\n  const translateText = async (text, targetLang) => {\n    const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate'; // URL de l'API LibreTranslate\n\n    try {\n      const response = await fetch(LIBRETRANSLATE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          q: text,\n          source: 'en',\n          // Langue source (ici anglais)\n          target: targetLang,\n          // Langue cible (fr ou autre)\n          format: 'text'\n        })\n      });\n      const data = await response.json();\n      console.log('data : ', data);\n      console.log('data : ', data);\n      return data.translatedText; // Retourner le texte traduit\n    } catch (error) {\n      console.error('Erreur de traduction:', error);\n      return text; // Retourner le texte d'origine en cas d'erreur\n    }\n  };\n\n  // Fonction pour récupérer la définition de chaque mot depuis l'API Wiktionnaire\n  const fetchDefinitionFromWiktionary = async mot => {\n    const url = `https://en.wiktionary.org/w/api.php?action=query&titles=${mot}&prop=extracts&exintro&explaintext&format=json&origin=*`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log('data : ', data);\n      const page = data.query.pages[Object.keys(data.query.pages)[0]];\n      const definition = page.extract || null; // null si aucune définition trouvée\n\n      // Si une définition est trouvée, on la stocke\n      if (definition) {\n        setDefinitions(prevDefinitions => ({\n          ...prevDefinitions,\n          [mot]: definition\n        }));\n      } else {\n        // Si aucune définition trouvée, essayer une autre API\n        fetchDefinitionFromDictionaryAPI(mot);\n      }\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot} depuis Wiktionnaire:`, error);\n      fetchDefinitionFromDictionaryAPI(mot); // Si erreur, tenter l'autre API\n    }\n  };\n\n  // Fonction de secours pour récupérer la définition de chaque mot depuis DictionaryAPI.dev\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || \"Définition introuvable\";\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: \"Erreur de chargement\"\n      }));\n    }\n  };\n\n  // Appel des fonctions de récupération de définition pour chaque mot\n  useEffect(() => {\n    mots.forEach(({\n      mot\n    }) => {\n      fetchDefinitionFromWiktionary(mot);\n    });\n  }, []);\n  const supprFavoris = item => {\n    console.log(\"coeur cliqué !\");\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\n  };\n  const updateTxtLang = txt => {\n    console.log('current idioma : ', langCurrent);\n    if (langCurrent === \"en\") {\n      return txt;\n    } else {\n      return translateText(txt, langCurrent);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*updateTxtLang(item.mot)*/item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-suit-heart-fill\",\n        id: item.mot,\n        onClick: () => supprFavoris(item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*updateTxtLang(definitions[item.mot]) || updateTxtLang(\"Chargement...\")*/definitions[item.mot] || \"Chargement...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(ListeMot, \"OwFWGDSjAnduEmM/ooUiJJ2ZccY=\");\n_c = ListeMot;\nexport default ListeMot;\n\n/*\r\n* Rédiger méthode qui lorsque qu'on clique sur le coeur, le mot est supprimé de la liste des favoris\r\n*\r\n*\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","langCurrent","localStorage","getItem","translateText","text","targetLang","LIBRETRANSLATE_URL","response","fetch","method","headers","body","JSON","stringify","q","source","target","format","data","json","console","log","translatedText","error","fetchDefinitionFromWiktionary","url","page","query","pages","Object","keys","definition","extract","prevDefinitions","fetchDefinitionFromDictionaryAPI","_data$","_data$$meanings$","_data$$meanings$$defi","meanings","forEach","supprFavoris","item","document","getElementById","className","updateTxtLang","txt","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ListeMot = () => {\r\n\r\n    // Liste des mots\r\n    const mots = [\r\n        { mot: \"Chicken\" },\r\n        { mot: \"Glaucous\" },\r\n        { mot: \"Pip squeak\" },\r\n        { mot: \"Inspiration\" },\r\n        { mot: \"Cockerel\" }\r\n    ];\r\n\r\n    // État pour stocker les définitions obtenues\r\n    const [definitions, setDefinitions] = useState({});\r\n    let langCurrent = localStorage.getItem(\"lang\") || \"fr\";\r\n\r\n    const translateText = async (text, targetLang) => {\r\n        const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate'; // URL de l'API LibreTranslate\r\n\r\n        try {\r\n            const response = await fetch(LIBRETRANSLATE_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    q: text,\r\n                    source: 'en', // Langue source (ici anglais)\r\n                    target: targetLang, // Langue cible (fr ou autre)\r\n                    format: 'text',\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('data : ', data);\r\n            console.log('data : ', data);\r\n\r\n            return data.translatedText; // Retourner le texte traduit\r\n        } catch (error) {\r\n            console.error('Erreur de traduction:', error);\r\n            return text; // Retourner le texte d'origine en cas d'erreur\r\n        }\r\n    };\r\n\r\n\r\n    // Fonction pour récupérer la définition de chaque mot depuis l'API Wiktionnaire\r\n    const fetchDefinitionFromWiktionary = async (mot) => {\r\n        const url = `https://en.wiktionary.org/w/api.php?action=query&titles=${mot}&prop=extracts&exintro&explaintext&format=json&origin=*`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            console.log('data : ', data);\r\n            const page = data.query.pages[Object.keys(data.query.pages)[0]];\r\n            const definition = page.extract || null; // null si aucune définition trouvée\r\n\r\n            // Si une définition est trouvée, on la stocke\r\n            if (definition) {\r\n                setDefinitions((prevDefinitions) => ({\r\n                    ...prevDefinitions,\r\n                    [mot]: definition\r\n                }));\r\n            } else {\r\n                // Si aucune définition trouvée, essayer une autre API\r\n                fetchDefinitionFromDictionaryAPI(mot);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis Wiktionnaire:`, error);\r\n            fetchDefinitionFromDictionaryAPI(mot); // Si erreur, tenter l'autre API\r\n        }\r\n    };\r\n\r\n\r\n    // Fonction de secours pour récupérer la définition de chaque mot depuis DictionaryAPI.dev\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n        const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: definition\r\n            }));\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: \"Erreur de chargement\"\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Appel des fonctions de récupération de définition pour chaque mot\r\n    useEffect(() => {\r\n        mots.forEach(({ mot }) => {\r\n            fetchDefinitionFromWiktionary(mot);\r\n        });\r\n    }, []);\r\n\r\n    const supprFavoris = ((item) => {\r\n        console.log(\"coeur cliqué !\");\r\n        document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\r\n    });\r\n\r\n    const updateTxtLang = ((txt) => {\r\n        console.log('current idioma : ', langCurrent);\r\n        if (langCurrent === \"en\") {\r\n            return txt;\r\n        }\r\n        else {\r\n            return translateText(txt, langCurrent);\r\n        }\r\n    }\r\n    );\r\n    return (\r\n        <div>\r\n\r\n            {mots.map((item, index) => (\r\n                <div key={index} className=\"wrapper\">\r\n                    <h1>{/*updateTxtLang(item.mot)*/ item.mot}</h1>\r\n                    <i className=\"bi bi-suit-heart-fill\" id={item.mot} onClick={() => supprFavoris(item)}></i>\r\n                    <p>{/*updateTxtLang(definitions[item.mot]) || updateTxtLang(\"Chargement...\")*/ definitions[item.mot] || \"Chargement...\" }</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListeMot;\r\n\r\n\r\n/*\r\n* Rédiger méthode qui lorsque qu'on clique sur le coeur, le mot est supprimé de la liste des favoris\r\n*\r\n*\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}