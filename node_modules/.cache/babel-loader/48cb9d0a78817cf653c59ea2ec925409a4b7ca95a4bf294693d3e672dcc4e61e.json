{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  // Liste des mots\n  const mots = [{\n    mot: \"Chicken\"\n  }, {\n    mot: \"Glaucous\"\n  }, {\n    mot: \"Pip squeak\"\n  }, {\n    mot: \"Inspiration\"\n  }, {\n    mot: \"Cockerel\"\n  }];\n\n  // États pour stocker les définitions et traductions\n  const [definitions, setDefinitions] = useState({});\n  const [translatedMots, setTranslatedMots] = useState({});\n  const [translatedDefinitions, setTranslatedDefinitions] = useState({});\n  const [langCurrent, setLangCurrent] = useState(localStorage.getItem(\"lang\") || \"fr\");\n  const [favoris, setFavoris] = useState([]);\n\n  // URL de l'API LibreTranslate\n  const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\n\n  // Fonction pour traduire un texte en utilisant l'API LibreTranslate\n  const translateTextWithLibreTranslate = async (text, targetLang) => {\n    try {\n      const response = await fetch(LIBRETRANSLATE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          q: text,\n          source: 'en',\n          target: targetLang,\n          format: 'text'\n        })\n      });\n      if (!response.ok) {\n        console.error(`Erreur HTTP: ${response.statusText}`);\n        return text;\n      }\n      const data = await response.json();\n      return data.translatedText || text;\n    } catch (error) {\n      console.error('Erreur lors de la requête LibreTranslate:', error);\n      return text;\n    }\n  };\n\n  // Fonction pour récupérer les définitions depuis DictionaryAPI\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || \"Définition introuvable\";\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: \"Erreur de chargement\"\n      }));\n    }\n  };\n\n  // Fonction pour traduire tous les mots et définitions\n  const fetchTranslations = async () => {\n    const translatedWords = {};\n    const translatedDefs = {};\n    await Promise.all(mots.map(async ({\n      mot\n    }) => {\n      // Traduire le mot\n      translatedWords[mot] = await translateTextWithLibreTranslate(mot, langCurrent);\n\n      // Traduire la définition\n      const definition = definitions[mot] || '';\n      translatedDefs[mot] = await translateTextWithLibreTranslate(definition, langCurrent);\n    }));\n    setTranslatedMots(translatedWords);\n    setTranslatedDefinitions(translatedDefs);\n  };\n\n  // Récupérer les définitions au chargement du composant\n  useEffect(() => {\n    const fetchData = async () => {\n      await Promise.all(mots.map(({\n        mot\n      }) => fetchDefinitionFromDictionaryAPI(mot)));\n    };\n    fetchData();\n  }, []);\n\n  // Traduire les mots et définitions dès que la langue change\n  useEffect(() => {\n    fetchTranslations();\n  }, [definitions, langCurrent]);\n\n  // Surveiller les changements dans `localStorage` pour la langue\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newLang = localStorage.getItem(\"lang\") || \"fr\";\n      setLangCurrent(newLang);\n      console.log('Langue mise à jour:', newLang);\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  // Ajouter ou supprimer un mot des favoris\n  const toggleFavoris = mot => {\n    setFavoris(prevFavoris => {\n      if (prevFavoris.includes(mot)) {\n        return prevFavoris.filter(f => f !== mot); // Si déjà dans favoris, on le supprime\n      }\n      return [...prevFavoris, mot]; // Sinon, on l'ajoute\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Liste des mots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: translatedMots[item.mot] || item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: `bi ${favoris.includes(item.mot) ? 'bi-suit-heart-fill' : 'bi-suit-heart'}`,\n        onClick: () => toggleFavoris(item.mot),\n        style: {\n          cursor: 'pointer',\n          fontSize: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: translatedDefinitions[item.mot] || definitions[item.mot] || \"Chargement...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(ListeMot, \"dxQl+UDnTM0Sdrb6CoCyLVKaFCY=\");\n_c = ListeMot;\nexport default ListeMot;\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","translatedMots","setTranslatedMots","translatedDefinitions","setTranslatedDefinitions","langCurrent","setLangCurrent","localStorage","getItem","favoris","setFavoris","LIBRETRANSLATE_URL","translateTextWithLibreTranslate","text","targetLang","response","fetch","method","headers","body","JSON","stringify","q","source","target","format","ok","console","error","statusText","data","json","translatedText","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","definition","meanings","prevDefinitions","fetchTranslations","translatedWords","translatedDefs","Promise","all","map","fetchData","handleStorageChange","newLang","log","window","addEventListener","removeEventListener","toggleFavoris","prevFavoris","includes","filter","f","children","fileName","_jsxFileName","lineNumber","columnNumber","item","index","className","onClick","style","cursor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ListeMot = () => {\r\n    // Liste des mots\r\n    const mots = [\r\n        { mot: \"Chicken\" },\r\n        { mot: \"Glaucous\" },\r\n        { mot: \"Pip squeak\" },\r\n        { mot: \"Inspiration\" },\r\n        { mot: \"Cockerel\" }\r\n    ];\r\n\r\n    // États pour stocker les définitions et traductions\r\n    const [definitions, setDefinitions] = useState({});\r\n    const [translatedMots, setTranslatedMots] = useState({});\r\n    const [translatedDefinitions, setTranslatedDefinitions] = useState({});\r\n    const [langCurrent, setLangCurrent] = useState(localStorage.getItem(\"lang\") || \"fr\");\r\n    const [favoris, setFavoris] = useState([]);\r\n\r\n    // URL de l'API LibreTranslate\r\n    const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\r\n\r\n    // Fonction pour traduire un texte en utilisant l'API LibreTranslate\r\n    const translateTextWithLibreTranslate = async (text, targetLang) => {\r\n        try {\r\n            const response = await fetch(LIBRETRANSLATE_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    q: text,\r\n                    source: 'en',\r\n                    target: targetLang,\r\n                    format: 'text',\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error(`Erreur HTTP: ${response.statusText}`);\r\n                return text;\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data.translatedText || text;\r\n        } catch (error) {\r\n            console.error('Erreur lors de la requête LibreTranslate:', error);\r\n            return text;\r\n        }\r\n    };\r\n\r\n    // Fonction pour récupérer les définitions depuis DictionaryAPI\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n        const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: definition\r\n            }));\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: \"Erreur de chargement\"\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Fonction pour traduire tous les mots et définitions\r\n    const fetchTranslations = async () => {\r\n        const translatedWords = {};\r\n        const translatedDefs = {};\r\n\r\n        await Promise.all(\r\n            mots.map(async ({ mot }) => {\r\n                // Traduire le mot\r\n                translatedWords[mot] = await translateTextWithLibreTranslate(mot, langCurrent);\r\n                \r\n                // Traduire la définition\r\n                const definition = definitions[mot] || '';\r\n                translatedDefs[mot] = await translateTextWithLibreTranslate(definition, langCurrent);\r\n            })\r\n        );\r\n\r\n        setTranslatedMots(translatedWords);\r\n        setTranslatedDefinitions(translatedDefs);\r\n    };\r\n\r\n    // Récupérer les définitions au chargement du composant\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Traduire les mots et définitions dès que la langue change\r\n    useEffect(() => {\r\n        fetchTranslations();\r\n    }, [definitions, langCurrent]);\r\n\r\n    // Surveiller les changements dans `localStorage` pour la langue\r\n    useEffect(() => {\r\n        const handleStorageChange = () => {\r\n            const newLang = localStorage.getItem(\"lang\") || \"fr\";\r\n            setLangCurrent(newLang);\r\n            console.log('Langue mise à jour:', newLang);\r\n        };\r\n\r\n        window.addEventListener('storage', handleStorageChange);\r\n        return () => {\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n    // Ajouter ou supprimer un mot des favoris\r\n    const toggleFavoris = (mot) => {\r\n        setFavoris((prevFavoris) => {\r\n            if (prevFavoris.includes(mot)) {\r\n                return prevFavoris.filter(f => f !== mot);  // Si déjà dans favoris, on le supprime\r\n            }\r\n            return [...prevFavoris, mot];  // Sinon, on l'ajoute\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Liste des mots</h1>\r\n            {mots.map((item, index) => (\r\n                <div key={index} className=\"wrapper\">\r\n                    <h2>{translatedMots[item.mot] || item.mot}</h2>\r\n                    <i\r\n                        className={`bi ${favoris.includes(item.mot) ? 'bi-suit-heart-fill' : 'bi-suit-heart'}`}\r\n                        onClick={() => toggleFavoris(item.mot)}\r\n                        style={{ cursor: 'pointer', fontSize: '20px' }}\r\n                    ></i>\r\n                    <p>{translatedDefinitions[item.mot] || definitions[item.mot] || \"Chargement...\"}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}