{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Définition du composant ListeMot\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  // Liste des mots à afficher et traduire\n  const mots = [{\n    mot: 'Chicken'\n  }, {\n    mot: 'Glaucous'\n  }, {\n    mot: 'Pip squeak'\n  }, {\n    mot: 'Inspiration'\n  }, {\n    mot: 'Cockerel'\n  }];\n\n  // États pour stocker les définitions, les traductions des mots et la langue actuelle\n  const [definitions, setDefinitions] = useState({}); // Définitions des mots\n  const [translatedMots, setTranslatedMots] = useState({}); // Traductions des mots\n  const [langCurrent, setLangCurrent] = useState(localStorage.getItem('lang') || 'fr'); // Langue actuelle, avec un fallback à 'fr'\n\n  // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      // Envoi d'une requête à l'API pour obtenir la définition du mot\n      const response = await fetch(url);\n      const data = await response.json();\n      // Extraction de la définition ou retour d'un message d'erreur si elle est introuvable\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || 'Définition introuvable';\n      // Mise à jour de l'état des définitions\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      // Gestion des erreurs, mise à jour avec un message d'erreur\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: 'Erreur de chargement'\n      }));\n    }\n  };\n\n  // Fonction pour traduire un texte via l'API Google Translate\n  const translateText = async (text, targetLang) => {\n    const sourceLang = 'en'; // Langue source (anglais)\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\n    try {\n      var _data$2, _data$2$;\n      // Envoi d'une requête pour obtenir la traduction\n      const response = await fetch(url);\n      const data = await response.json();\n      // Retourner la traduction ou le texte original si aucune traduction n'est trouvée\n      return (data === null || data === void 0 ? void 0 : (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : (_data$2$ = _data$2[0]) === null || _data$2$ === void 0 ? void 0 : _data$2$[0]) || text;\n    } catch (error) {\n      // Gestion des erreurs, retour du texte original en cas d'erreur\n      console.error('Erreur lors de la traduction:', error);\n      return text;\n    }\n  };\n\n  // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\n  const fetchTranslations = async () => {\n    // Si la langue courante est l'anglais, on garde les mots comme ils sont\n    if (langCurrent === 'en') {\n      setTranslatedMots(mots.reduce((acc, {\n        mot\n      }) => ({\n        ...acc,\n        [mot]: mot\n      }), {}));\n    } else {\n      const translated = {};\n      // Traduction des mots\n      await Promise.all(mots.map(async ({\n        mot\n      }) => {\n        translated[mot] = await translateText(mot, langCurrent);\n      }));\n      setTranslatedMots(translated); // Mise à jour des mots traduits\n    }\n\n    // Traduction des définitions\n    const translatedDef = {};\n    await Promise.all(\n    // Parcours de toutes les définitions pour les traduire\n    Object.keys(definitions).map(async mot => {\n      const translatedDefinition = await translateText(definitions[mot], langCurrent);\n      translatedDef[mot] = translatedDefinition;\n    }));\n    // Mise à jour des définitions traduites\n    setDefinitions(prevDefinitions => ({\n      ...prevDefinitions,\n      ...translatedDef\n    }));\n  };\n\n  // Utilisation de useEffect pour charger les définitions et les traductions lors du montage du composant\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Récupérer les définitions des mots via l'API\n        await Promise.all(mots.map(({\n          mot\n        }) => fetchDefinitionFromDictionaryAPI(mot)));\n        // Traduire les mots et leurs définitions\n        await fetchTranslations();\n      } catch (error) {\n        // Gestion des erreurs de chargement des données\n        console.error('Erreur lors du chargement des données:', error);\n      }\n    };\n    fetchData(); // Appel de la fonction lors du montage\n  }, [langCurrent]); // Re-exécuter lorsque `langCurrent` change\n\n  // Utilisation de useEffect pour surveiller les changements dans `localStorage` pour la langue\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newLang = localStorage.getItem('lang') || 'fr';\n      setLangCurrent(newLang); // Mise à jour de la langue actuelle\n      console.log('Langue actuelle:', newLang);\n    };\n\n    // Ajouter un écouteur d'événement pour surveiller les changements dans localStorage\n    window.addEventListener('storage', handleStorageChange);\n\n    // Nettoyage de l'écouteur d'événement lors du démontage du composant\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []); // Cet effet ne dépend d'aucune variable (ne s'exécute qu'une seule fois lors du montage)\n\n  // Fonction pour charger et initialiser le widget Google Translate\n  useEffect(() => {\n    const loadGoogleTranslate = () => {\n      if (!window.google) {\n        // Si la fonction Google Translate n'est pas encore chargée, on charge le script\n        const script = document.createElement('script');\n        script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\n        script.async = true;\n        script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\n        document.body.appendChild(script);\n      } else {\n        initializeGoogleTranslate(); // Si Google est déjà chargé, on initialise le widget\n      }\n    };\n    const initializeGoogleTranslate = () => {\n      // Assurez-vous que la fonction `googleTranslateElementInit` est bien définie\n      if (typeof window.googleTranslateElementInit === \"function\") {\n        new window.google.translate.TranslateElement({\n          pageLanguage: langCurrent // Langue de la page actuelle\n        }, \"google_translate_element\");\n      } else {\n        console.error('La fonction googleTranslateElementInit n\\'est pas définie');\n      }\n    };\n\n    // Si Google Translate est déjà chargé, on initialise directement, sinon on charge le script\n    if (window.google && window.google.translate) {\n      initializeGoogleTranslate();\n    } else {\n      loadGoogleTranslate();\n    }\n  }, [langCurrent]); // Re-exécuter lorsque `langCurrent` change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"google_translate_element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: translatedMots[item.mot] || item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"D\\xE9finition:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 14\n        }, this), \" \", definitions[item.mot] || 'Chargement...']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), \"  \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n// Export du composant ListeMot\n_s(ListeMot, \"6etocxl3W8pemPxiNquRV6+4aCk=\");\n_c = ListeMot;\nexport default ListeMot;\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","translatedMots","setTranslatedMots","langCurrent","setLangCurrent","localStorage","getItem","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","response","fetch","data","json","definition","meanings","prevDefinitions","error","console","translateText","text","targetLang","sourceLang","encodeURI","_data$2","_data$2$","fetchTranslations","reduce","acc","translated","Promise","all","map","translatedDef","Object","keys","translatedDefinition","fetchData","handleStorageChange","newLang","log","window","addEventListener","removeEventListener","loadGoogleTranslate","google","script","document","createElement","src","async","onerror","body","appendChild","initializeGoogleTranslate","googleTranslateElementInit","translate","TranslateElement","pageLanguage","children","id","fileName","_jsxFileName","lineNumber","columnNumber","item","index","className","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// Définition du composant ListeMot\r\nconst ListeMot = () => {\r\n  // Liste des mots à afficher et traduire\r\n  const mots = [\r\n    { mot: 'Chicken' },\r\n    { mot: 'Glaucous' },\r\n    { mot: 'Pip squeak' },\r\n    { mot: 'Inspiration' },\r\n    { mot: 'Cockerel' },\r\n  ];\r\n\r\n  // États pour stocker les définitions, les traductions des mots et la langue actuelle\r\n  const [definitions, setDefinitions] = useState({});  // Définitions des mots\r\n  const [translatedMots, setTranslatedMots] = useState({});  // Traductions des mots\r\n  const [langCurrent, setLangCurrent] = useState(localStorage.getItem('lang') || 'fr');  // Langue actuelle, avec un fallback à 'fr'\r\n\r\n  // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\r\n  const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n    try {\r\n      // Envoi d'une requête à l'API pour obtenir la définition du mot\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      // Extraction de la définition ou retour d'un message d'erreur si elle est introuvable\r\n      const definition = data[0]?.meanings[0]?.definitions[0]?.definition || 'Définition introuvable';\r\n      // Mise à jour de l'état des définitions\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        [mot]: definition,\r\n      }));\r\n    } catch (error) {\r\n      // Gestion des erreurs, mise à jour avec un message d'erreur\r\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        [mot]: 'Erreur de chargement',\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire un texte via l'API Google Translate\r\n  const translateText = async (text, targetLang) => {\r\n    const sourceLang = 'en';  // Langue source (anglais)\r\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\r\n\r\n    try {\r\n      // Envoi d'une requête pour obtenir la traduction\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      // Retourner la traduction ou le texte original si aucune traduction n'est trouvée\r\n      return data?.[0]?.[0]?.[0] || text;\r\n    } catch (error) {\r\n      // Gestion des erreurs, retour du texte original en cas d'erreur\r\n      console.error('Erreur lors de la traduction:', error);\r\n      return text;\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\r\n  const fetchTranslations = async () => {\r\n    // Si la langue courante est l'anglais, on garde les mots comme ils sont\r\n    if (langCurrent === 'en') {\r\n      setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n    } else {\r\n      const translated = {};\r\n      // Traduction des mots\r\n      await Promise.all(\r\n        mots.map(async ({ mot }) => {\r\n          translated[mot] = await translateText(mot, langCurrent);\r\n        })\r\n      );\r\n      setTranslatedMots(translated);  // Mise à jour des mots traduits\r\n    }\r\n\r\n    // Traduction des définitions\r\n    const translatedDef = {};\r\n    await Promise.all(\r\n      // Parcours de toutes les définitions pour les traduire\r\n      Object.keys(definitions).map(async (mot) => {\r\n        const translatedDefinition = await translateText(definitions[mot], langCurrent);\r\n        translatedDef[mot] = translatedDefinition;\r\n      })\r\n    );\r\n    // Mise à jour des définitions traduites\r\n    setDefinitions((prevDefinitions) => ({\r\n      ...prevDefinitions,\r\n      ...translatedDef,\r\n    }));\r\n  };\r\n\r\n  // Utilisation de useEffect pour charger les définitions et les traductions lors du montage du composant\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Récupérer les définitions des mots via l'API\r\n        await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n        // Traduire les mots et leurs définitions\r\n        await fetchTranslations();\r\n      } catch (error) {\r\n        // Gestion des erreurs de chargement des données\r\n        console.error('Erreur lors du chargement des données:', error);\r\n      }\r\n    };\r\n    fetchData();  // Appel de la fonction lors du montage\r\n  }, [langCurrent]);  // Re-exécuter lorsque `langCurrent` change\r\n\r\n  // Utilisation de useEffect pour surveiller les changements dans `localStorage` pour la langue\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      const newLang = localStorage.getItem('lang') || 'fr';\r\n      setLangCurrent(newLang);  // Mise à jour de la langue actuelle\r\n      console.log('Langue actuelle:', newLang);\r\n    };\r\n\r\n    // Ajouter un écouteur d'événement pour surveiller les changements dans localStorage\r\n    window.addEventListener('storage', handleStorageChange);\r\n\r\n    // Nettoyage de l'écouteur d'événement lors du démontage du composant\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, []);  // Cet effet ne dépend d'aucune variable (ne s'exécute qu'une seule fois lors du montage)\r\n\r\n  // Fonction pour charger et initialiser le widget Google Translate\r\n  useEffect(() => {\r\n    const loadGoogleTranslate = () => {\r\n      if (!window.google) {\r\n        // Si la fonction Google Translate n'est pas encore chargée, on charge le script\r\n        const script = document.createElement('script');\r\n        script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\r\n        script.async = true;\r\n        script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\r\n        document.body.appendChild(script);\r\n      } else {\r\n        initializeGoogleTranslate();  // Si Google est déjà chargé, on initialise le widget\r\n      }\r\n    };\r\n\r\n    const initializeGoogleTranslate = () => {\r\n      // Assurez-vous que la fonction `googleTranslateElementInit` est bien définie\r\n      if (typeof window.googleTranslateElementInit === \"function\") {\r\n        new window.google.translate.TranslateElement({\r\n          pageLanguage: langCurrent,  // Langue de la page actuelle\r\n        }, \"google_translate_element\");\r\n      } else {\r\n        console.error('La fonction googleTranslateElementInit n\\'est pas définie');\r\n      }\r\n    };\r\n\r\n    // Si Google Translate est déjà chargé, on initialise directement, sinon on charge le script\r\n    if (window.google && window.google.translate) {\r\n      initializeGoogleTranslate();\r\n    } else {\r\n      loadGoogleTranslate();\r\n    }\r\n  }, [langCurrent]);  // Re-exécuter lorsque `langCurrent` change\r\n\r\n  return (\r\n    <div>\r\n      {/* Container pour le widget Google Translate */}\r\n      <div id=\"google_translate_element\"></div>\r\n\r\n      {/* Affichage des mots et de leurs définitions */}\r\n      {mots.map((item, index) => (\r\n        <div key={index} className=\"wrapper\">\r\n          <h1>{translatedMots[item.mot] || item.mot}</h1>  {/* Affichage du mot traduit ou original */}\r\n          <p><strong>Définition:</strong> {definitions[item.mot] || 'Chargement...'}</p>  {/* Affichage de la définition ou un message de chargement */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export du composant ListeMot\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}