{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot-good-vers\\\\front\\\\src\\\\store\\\\themeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { classByTheme } from '../script/change-theme'; // Assure-toi que cette fonction change le texte du DOM\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nconst ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [themeData, setThemeData] = useState(classByTheme[theme]); // Récupère les données de traduction\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    setThemeData(classByTheme[theme]);\n  }, [theme]); // Exécuter à chaque changement de langue\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme,\n      themeData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(ThemeProvider, \"pAw7nDTrJRiqKOTbA3+ZqCI/eqk=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { ThemeContext, ThemeProvider };\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","classByTheme","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","themeData","setThemeData","toggleTheme","prevTheme","useEffect","localStorage","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot-good-vers/front/src/store/themeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\nimport { classByTheme } from '../script/change-theme'; // Assure-toi que cette fonction change le texte du DOM\r\n\r\nconst ThemeContext = createContext();\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n    const [theme, setTheme] = useState('light');\r\n    const [themeData, setThemeData] = useState(classByTheme[theme]); // Récupère les données de traduction\r\n\r\n    const toggleTheme = () => {\r\n        setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n    };\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('theme', theme);\r\n         setThemeData(classByTheme[theme]);\r\n    }, [theme]); // Exécuter à chaque changement de langue\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, toggleTheme, themeData }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useTheme = () => useContext(ThemeContext);\r\nexport { ThemeContext, ThemeProvider };"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,YAAY,QAAQ,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;EAC3C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAACE,YAAY,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEjE,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACtBH,QAAQ,CAAEI,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACvE,CAAC;EAEDC,SAAS,CAAC,MAAM;IACZC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;IACnCG,YAAY,CAACV,YAAY,CAACO,KAAK,CAAC,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,oBACIL,OAAA,CAACC,YAAY,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEV,KAAK;MAAEI,WAAW;MAAEF;IAAU,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAACf,EAAA,CAlBIF,aAAa;AAAAkB,EAAA,GAAblB,aAAa;AAoBnB,OAAO,MAAMmB,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzB,UAAU,CAACI,YAAY,CAAC;AAAA;AAACqB,GAAA,CAA1CD,QAAQ;AACrB,SAASpB,YAAY,EAAEC,aAAa;AAAG,IAAAkB,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}