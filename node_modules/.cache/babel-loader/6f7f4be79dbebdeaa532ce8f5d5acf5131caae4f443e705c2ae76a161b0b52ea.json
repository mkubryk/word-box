{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot-good-vers\\\\src\\\\pages\\\\Home\\\\Home.jsx\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React from \"react\";\nimport { useState } from \"react\";\nimport $ from \"jquery\";\nimport '../../css/accueil.css';\nimport { useLanguage } from '../../store/languageContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const {\n    language,\n    setLanguage,\n    languageData\n  } = useLanguage();\n  const [word, setWord] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [definitions, setDefinitions] = useState({});\n  const [translatedMots, setTranslatedMots] = useState({});\n\n  // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || 'Définition introuvable';\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: 'Erreur de chargement'\n      }));\n    }\n  };\n\n  // Fonction pour traduire un texte via l'API Google Translate\n  const translateText = async (text, targetLang) => {\n    const sourceLang = 'en';\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\n    try {\n      var _data$2, _data$2$;\n      const response = await fetch(url);\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : (_data$2$ = _data$2[0]) === null || _data$2$ === void 0 ? void 0 : _data$2$[0]) || text;\n    } catch (error) {\n      console.error('Erreur lors de la traduction:', error);\n      return text;\n    }\n  };\n\n  // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\n  const fetchTranslations = async () => {\n    if (/*langCurrent*/language === 'en') {\n      setTranslatedMots(mots.reduce((acc, {\n        mot\n      }) => ({\n        ...acc,\n        [mot]: mot\n      }), {}));\n    } else {\n      const translated = {};\n      await Promise.all(mots.map(async ({\n        mot\n      }) => {\n        translated[mot] = await translateText(mot, language);\n      }));\n      setTranslatedMots(translated);\n    }\n    const translatedDef = {};\n    await Promise.all(Object.keys(definitions).map(async mot => {\n      const translatedDefinition = await translateText(definitions[mot], language);\n      translatedDef[mot] = translatedDefinition;\n    }));\n    setDefinitions(prevDefinitions => ({\n      ...prevDefinitions,\n      ...translatedDef\n    }));\n  };\n  const supprFavoris = item => {\n    console.log(\"coeur cliqué !\");\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await Promise.all(mots.map(({\n          mot\n        }) => fetchDefinitionFromDictionaryAPI(mot)));\n        await fetchTranslations();\n      } catch (error) {\n        console.error('Erreur lors du chargement des données:', error);\n      }\n    };\n    fetchData();\n  }, [language]);\n  useEffect(() => {\n    const loadGoogleTranslate = () => {\n      if (!window.google) {\n        const script = document.createElement('script');\n        script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\n        script.async = true;\n        script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\n        document.body.appendChild(script);\n      } else {\n        initializeGoogleTranslate();\n      }\n    };\n    const initializeGoogleTranslate = () => {\n      if (typeof window.googleTranslateElementInit === \"function\") {\n        new window.google.translate.TranslateElement({\n          pageLanguage: language\n        }, \"google_translate_element\");\n      } else {\n        console.error('La fonction googleTranslateElementInit n\\'est pas définie');\n      }\n    };\n    if (window.google && window.google.translate) {\n      initializeGoogleTranslate();\n    } else {\n      loadGoogleTranslate();\n    }\n  }, [language]);\n  const SearchWord = event => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"wrapper fit-box center-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        \"data-translate-key\": \"titleSearch\",\n        children: languageData.titleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: SearchWord,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"input-box \",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"search\",\n            name: \"search\",\n            value: word,\n            onChange: event => setWord(event)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn\",\n          type: \"submit\",\n          \"data-translate-key\": \"search\",\n          children: languageData.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"OYnpSOQJXjYtNbjxQcnkHDmv/EU=\", false, function () {\n  return [useLanguage];\n});\n_c = Home;\nexport default Home;\n\n/*\r\n* Rédiger méthode qui lorsque qu'on clique sur le coeur, le mot est supprimé de la liste des favoris\r\n*\r\n*\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","$","useLanguage","jsxDEV","_jsxDEV","Home","_s","language","setLanguage","languageData","word","setWord","result","setResult","definitions","setDefinitions","translatedMots","setTranslatedMots","fetchDefinitionFromDictionaryAPI","mot","url","_data$","_data$$meanings$","_data$$meanings$$defi","response","fetch","data","json","definition","meanings","prevDefinitions","error","console","translateText","text","targetLang","sourceLang","encodeURI","_data$2","_data$2$","fetchTranslations","mots","reduce","acc","translated","Promise","all","map","translatedDef","Object","keys","translatedDefinition","supprFavoris","item","log","document","getElementById","className","useEffect","fetchData","loadGoogleTranslate","window","google","script","createElement","src","async","onerror","body","appendChild","initializeGoogleTranslate","googleTranslateElementInit","translate","TranslateElement","pageLanguage","SearchWord","event","class","children","titleSearch","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","id","name","value","onChange","search","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot-good-vers/src/pages/Home/Home.jsx"],"sourcesContent":["// src/App.js\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport $ from \"jquery\";\r\nimport '../../css/accueil.css';\r\nimport { useLanguage } from '../../store/languageContext';\r\n\r\nfunction Home() {\r\n    const { language, setLanguage, languageData } = useLanguage();\r\n\r\n    const [word, setWord] = useState(\"\");\r\n    const [result, setResult] = useState(\"\");\r\n    const [definitions, setDefinitions] = useState({});\r\n    const [translatedMots, setTranslatedMots] = useState({});\r\n  \r\n    // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n      const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const definition = data[0]?.meanings[0]?.definitions[0]?.definition || 'Définition introuvable';\r\n        setDefinitions((prevDefinitions) => ({\r\n          ...prevDefinitions,\r\n          [mot]: definition,\r\n        }));\r\n      } catch (error) {\r\n        console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\r\n        setDefinitions((prevDefinitions) => ({\r\n          ...prevDefinitions,\r\n          [mot]: 'Erreur de chargement',\r\n        }));\r\n      }\r\n    };\r\n  \r\n    // Fonction pour traduire un texte via l'API Google Translate\r\n    const translateText = async (text, targetLang) => {\r\n      const sourceLang = 'en';\r\n      const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        return data?.[0]?.[0]?.[0] || text;\r\n      } catch (error) {\r\n        console.error('Erreur lors de la traduction:', error);\r\n        return text;\r\n      }\r\n    };\r\n  \r\n    // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\r\n    const fetchTranslations = async () => {\r\n      if (/*langCurrent*/ language === 'en') {\r\n        setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n      } else {\r\n        const translated = {};\r\n        await Promise.all(\r\n          mots.map(async ({ mot }) => {\r\n            translated[mot] = await translateText(mot,language);\r\n          })\r\n        );\r\n        setTranslatedMots(translated);\r\n      }\r\n  \r\n      const translatedDef = {};\r\n      await Promise.all(\r\n        Object.keys(definitions).map(async (mot) => {\r\n          const translatedDefinition = await translateText(definitions[mot], language);\r\n          translatedDef[mot] = translatedDefinition;\r\n        })\r\n      );\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        ...translatedDef,\r\n      }));\r\n    };\r\n  \r\n    const supprFavoris = ((item) => {\r\n      console.log(\"coeur cliqué !\");\r\n      document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\r\n  });\r\n  \r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n          await fetchTranslations();\r\n        } catch (error) {\r\n          console.error('Erreur lors du chargement des données:', error);\r\n        }\r\n      };\r\n      fetchData();\r\n    }, [language]);\r\n  \r\n    useEffect(() => {\r\n      const loadGoogleTranslate = () => {\r\n        if (!window.google) {\r\n          const script = document.createElement('script');\r\n          script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\r\n          script.async = true;\r\n          script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\r\n          document.body.appendChild(script);\r\n        } else {\r\n          initializeGoogleTranslate();\r\n        }\r\n      };\r\n  \r\n      const initializeGoogleTranslate = () => {\r\n        if (typeof window.googleTranslateElementInit === \"function\") {\r\n          new window.google.translate.TranslateElement({\r\n            pageLanguage: language,\r\n          }, \"google_translate_element\");\r\n        } else {\r\n          console.error('La fonction googleTranslateElementInit n\\'est pas définie');\r\n        }\r\n      };\r\n  \r\n      if (window.google && window.google.translate) {\r\n        initializeGoogleTranslate();\r\n      } else {\r\n        loadGoogleTranslate();\r\n      }\r\n    }, [language]);\r\n  \r\n   \r\n\r\n    const SearchWord = (event) => {};\r\n\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"wrapper fit-box center-text\">\r\n                <h2 data-translate-key=\"titleSearch\">{languageData.titleSearch}</h2>\r\n                <form\r\n                    onSubmit={SearchWord}\r\n                >\r\n                    <div class=\"input-box \"><input\r\n                        type=\"text\"\r\n                        id=\"search\"\r\n                        name=\"search\"\r\n                        value={word}\r\n                        onChange={(event) =>\r\n                            setWord(event)\r\n                        }\r\n                    /></div>\r\n                    <button class=\"btn\" type=\"submit\" data-translate-key=\"search\">{languageData.search}</button>\r\n\r\n                </form>\r\n\r\n                <div class=\"result\">\r\n\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n\r\n/*\r\n* Rédiger méthode qui lorsque qu'on clique sur le coeur, le mot est supprimé de la liste des favoris\r\n*\r\n*\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}