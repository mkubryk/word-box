{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  // Liste des mots\n  const mots = [{\n    mot: \"Chicken\"\n  }, {\n    mot: \"Glaucous\"\n  }, {\n    mot: \"Pip squeak\"\n  }, {\n    mot: \"Inspiration\"\n  }, {\n    mot: \"Cockerel\"\n  }];\n\n  // États pour stocker les définitions et traductions\n  const [definitions, setDefinitions] = useState({});\n  const [translatedMots, setTranslatedMots] = useState({});\n  const [langCurrent, setLangCurrent] = useState(localStorage.getItem(\"lang\") || \"fr\");\n  console.log('Langue actuelle au début :', langCurrent);\n  const translateText = async (text, targetLang) => {\n    const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\n    try {\n      const response = await fetch(LIBRETRANSLATE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          q: text,\n          source: 'en',\n          target: targetLang,\n          format: 'text'\n        })\n      });\n      if (!response.ok) {\n        console.error(`Erreur HTTP: ${response.statusText}`);\n        return text;\n      }\n      const data = await response.json();\n      console.log('Réponse de LibreTranslate:', data);\n      return data.translatedText || text;\n    } catch (error) {\n      console.error('Erreur lors de la requête LibreTranslate:', error);\n      return text;\n    }\n  };\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || \"Définition introuvable\";\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: \"Erreur de chargement\"\n      }));\n    }\n  };\n  const fetchTranslations = async () => {\n    if (langCurrent === 'en') {\n      setTranslatedMots(mots.reduce((acc, {\n        mot\n      }) => ({\n        ...acc,\n        [mot]: mot\n      }), {}));\n    } else {\n      const translated = {};\n      await Promise.all(mots.map(async ({\n        mot\n      }) => {\n        translated[mot] = await translateText(mot, langCurrent);\n      }));\n      setTranslatedMots(translated);\n    }\n  };\n\n  // Récupérer les définitions et traductions au chargement du composant\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await Promise.all(mots.map(({\n          mot\n        }) => fetchDefinitionFromDictionaryAPI(mot)));\n        await fetchTranslations();\n      } catch (error) {\n        console.error('Erreur lors du chargement des données:', error);\n      }\n    };\n    fetchData();\n  }, [langCurrent]);\n\n  // Surveiller les changements dans `localStorage` pour la langue\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newLang = localStorage.getItem(\"lang\") || \"fr\";\n      setLangCurrent(newLang);\n      console.log('Langue actuelle:', newLang);\n    };\n    window.addEventListener('storage', handleStorageChange);\n\n    // Nettoyer l'événement\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  const supprFavoris = item => {\n    console.log(\"coeur cliqué !\");\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\n  };\n  function googleTranslateElementInit() {\n    new google.translate.TranslateElement({\n      pageLanguage: 'en'\n    }, 'google_translate_element');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"script\", {\n      type: \"text/javascript\",\n      src: \"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: translatedMots[item.mot] || item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-suit-heart-fill\",\n        id: item.mot,\n        onClick: () => supprFavoris(item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: definitions[item.mot] || \"Chargement...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(ListeMot, \"+Yw+165Ho4kheWM4lxqpF3+p21s=\");\n_c = ListeMot;\nexport default ListeMot;\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","translatedMots","setTranslatedMots","langCurrent","setLangCurrent","localStorage","getItem","console","log","translateText","text","targetLang","LIBRETRANSLATE_URL","response","fetch","method","headers","body","JSON","stringify","q","source","target","format","ok","error","statusText","data","json","translatedText","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","definition","meanings","prevDefinitions","fetchTranslations","reduce","acc","translated","Promise","all","map","fetchData","handleStorageChange","newLang","window","addEventListener","removeEventListener","supprFavoris","item","document","getElementById","className","googleTranslateElementInit","google","translate","TranslateElement","pageLanguage","children","type","src","fileName","_jsxFileName","lineNumber","columnNumber","index","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ListeMot = () => {\r\n    // Liste des mots\r\n    const mots = [\r\n        { mot: \"Chicken\" },\r\n        { mot: \"Glaucous\" },\r\n        { mot: \"Pip squeak\" },\r\n        { mot: \"Inspiration\" },\r\n        { mot: \"Cockerel\" }\r\n    ];\r\n\r\n    // États pour stocker les définitions et traductions\r\n    const [definitions, setDefinitions] = useState({});\r\n    const [translatedMots, setTranslatedMots] = useState({});\r\n    const [langCurrent, setLangCurrent] = useState(localStorage.getItem(\"lang\") || \"fr\");\r\n    \r\n    console.log('Langue actuelle au début :', langCurrent);\r\n\r\n    const translateText = async (text, targetLang) => {\r\n        const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\r\n\r\n        try {\r\n            const response = await fetch(LIBRETRANSLATE_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    q: text,\r\n                    source: 'en',\r\n                    target: targetLang,\r\n                    format: 'text',\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error(`Erreur HTTP: ${response.statusText}`);\r\n                return text;\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log('Réponse de LibreTranslate:', data);\r\n\r\n            return data.translatedText || text;\r\n        } catch (error) {\r\n            console.error('Erreur lors de la requête LibreTranslate:', error);\r\n            return text;\r\n        }\r\n    };\r\n\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n        const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: definition\r\n            }));\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: \"Erreur de chargement\"\r\n            }));\r\n        }\r\n    };\r\n\r\n    const fetchTranslations = async () => {\r\n        if (langCurrent === 'en') {\r\n            setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n        } else {\r\n            const translated = {};\r\n            await Promise.all(\r\n                mots.map(async ({ mot }) => {\r\n                    translated[mot] = await translateText(mot, langCurrent);\r\n                })\r\n            );\r\n            setTranslatedMots(translated);\r\n        }\r\n    };\r\n\r\n    // Récupérer les définitions et traductions au chargement du composant\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n                await fetchTranslations();\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [langCurrent]);\r\n\r\n    // Surveiller les changements dans `localStorage` pour la langue\r\n    useEffect(() => {\r\n        const handleStorageChange = () => {\r\n            const newLang = localStorage.getItem(\"lang\") || \"fr\";\r\n            setLangCurrent(newLang);\r\n            console.log('Langue actuelle:', newLang);\r\n        };\r\n\r\n        window.addEventListener('storage', handleStorageChange);\r\n\r\n        // Nettoyer l'événement\r\n        return () => {\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n    const supprFavoris = (item) => {\r\n        console.log(\"coeur cliqué !\");\r\n        document.getElementById(item.mot).className =\r\n            document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\"\r\n                ? \"bi bi-suit-heart\"\r\n                : \"bi bi-suit-heart-fill\";\r\n    };\r\n\r\n    function googleTranslateElementInit() {\r\n        new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"></script>\r\n            {mots.map((item, index) => (\r\n                <div key={index} className=\"wrapper\">\r\n                    <h1>{translatedMots[item.mot] || item.mot}</h1>\r\n                    <i\r\n                        className=\"bi bi-suit-heart-fill\"\r\n                        id={item.mot}\r\n                        onClick={() => supprFavoris(item)}\r\n                    ></i>\r\n                    <p>{definitions[item.mot] || \"Chargement...\"}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}