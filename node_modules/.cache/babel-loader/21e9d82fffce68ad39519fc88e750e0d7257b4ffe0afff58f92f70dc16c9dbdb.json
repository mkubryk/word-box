{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import{translations,changeLanguage}from'../script/translate';// Assure-toi que cette fonction change le texte du DOM\nimport{jsx as _jsx}from\"react/jsx-runtime\";const LanguageContext=/*#__PURE__*/createContext();const LanguageProvider=_ref=>{let{children}=_ref;const[language,setLanguage]=useState(localStorage.getItem('lang')||'en');// Langue par défaut : 'en'\nconst[languageData,setLanguageData]=useState(translations[language]);// Récupère les données de traduction\n// Effet pour appliquer la langue au montage et au changement de langue\nuseEffect(()=>{// Mettre à jour le localStorage avec la nouvelle langue\nlocalStorage.setItem('lang',language);// Appliquer les traductions dans le DOM\nchangeLanguage(language);// Mettre à jour les données de langue dans l'état\nsetLanguageData(translations[language]);},[language]);// Exécuter à chaque changement de langue\nreturn/*#__PURE__*/_jsx(LanguageContext.Provider,{value:{language,setLanguage,languageData},children:children});};export const useLanguage=()=>useContext(LanguageContext);export{LanguageContext,LanguageProvider};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","translations","changeLanguage","jsx","_jsx","LanguageContext","LanguageProvider","_ref","children","language","setLanguage","localStorage","getItem","languageData","setLanguageData","setItem","Provider","value","useLanguage"],"sources":["C:/xampp/htdocs/projet-web-s1-word-box/src/store/languageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { translations, changeLanguage } from '../script/translate'; // Assure-toi que cette fonction change le texte du DOM\r\n\r\nconst LanguageContext = createContext();\r\n\r\nconst LanguageProvider = ({ children }) => {\r\n    const [language, setLanguage] = useState(localStorage.getItem('lang') || 'en'); // Langue par défaut : 'en'\r\n    const [languageData, setLanguageData] = useState(translations[language]); // Récupère les données de traduction\r\n\r\n    // Effet pour appliquer la langue au montage et au changement de langue\r\n    useEffect(() => {\r\n        // Mettre à jour le localStorage avec la nouvelle langue\r\n        localStorage.setItem('lang', language);\r\n\r\n        // Appliquer les traductions dans le DOM\r\n        changeLanguage(language);\r\n\r\n        // Mettre à jour les données de langue dans l'état\r\n        setLanguageData(translations[language]);\r\n    }, [language]); // Exécuter à chaque changement de langue\r\n\r\n    return (\r\n        <LanguageContext.Provider value={{ language, setLanguage, languageData }}>\r\n            {children}\r\n        </LanguageContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useLanguage = () => useContext(LanguageContext);\r\n\r\nexport { LanguageContext, LanguageProvider };\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAC7E,OAASC,YAAY,CAAEC,cAAc,KAAQ,qBAAqB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAEpE,KAAM,CAAAC,eAAe,cAAGR,aAAa,CAAC,CAAC,CAEvC,KAAM,CAAAS,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClC,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,EAAI,IAAI,CAAC,CAAE;AAChF,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGhB,QAAQ,CAACG,YAAY,CAACQ,QAAQ,CAAC,CAAC,CAAE;AAE1E;AACAV,SAAS,CAAC,IAAM,CACZ;AACAY,YAAY,CAACI,OAAO,CAAC,MAAM,CAAEN,QAAQ,CAAC,CAEtC;AACAP,cAAc,CAACO,QAAQ,CAAC,CAExB;AACAK,eAAe,CAACb,YAAY,CAACQ,QAAQ,CAAC,CAAC,CAC3C,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAAE;AAEhB,mBACIL,IAAA,CAACC,eAAe,CAACW,QAAQ,EAACC,KAAK,CAAE,CAAER,QAAQ,CAAEC,WAAW,CAAEG,YAAa,CAAE,CAAAL,QAAA,CACpEA,QAAQ,CACa,CAAC,CAEnC,CAAC,CAED,MAAO,MAAM,CAAAU,WAAW,CAAGA,CAAA,GAAMlB,UAAU,CAACK,eAAe,CAAC,CAE5D,OAASA,eAAe,CAAEC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}