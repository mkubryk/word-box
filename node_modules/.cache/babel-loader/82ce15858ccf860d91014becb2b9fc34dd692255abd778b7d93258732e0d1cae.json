{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\store\\\\languageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { changeLanguage } from '../'; // Importation de la fonction de changement de langue\n\n// Création du contexte pour la langue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\n\n// Provider pour gérer la langue et les traductions\nconst LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState(localStorage.getItem('lang') || 'en');\n  const [languageData, setLanguageData] = useState({});\n\n  // Charger les données de traduction\n  useEffect(() => {\n    // Charger les données de langue à partir du fichier JSON ou autre source\n    fetchLanguageData();\n  }, []);\n\n  // Charger les données de langue chaque fois que la langue change\n  useEffect(() => {\n    fetchLanguageData();\n    // Appliquer la traduction aux éléments HTML (même sans recharger la page)\n    changeLanguage(language);\n  }, [language]);\n  const fetchLanguageData = () => {\n    const dataUrl = `/locales/${language}.json`; // Adaptez selon votre structure de fichiers\n    fetch(dataUrl).then(response => response.json()).then(data => {\n      setLanguageData(data);\n      localStorage.setItem('lang', language); // Sauvegarder la langue dans localStorage\n    }).catch(error => console.error('Erreur de chargement des données de langue:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      setLanguage,\n      languageData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n// Hook pour accéder au contexte de la langue\n_s(LanguageProvider, \"zALiCRAF3pC1knBKm6vwtwD6tGQ=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  return useContext(LanguageContext);\n};\n_s2(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { LanguageContext, LanguageProvider };\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","changeLanguage","jsxDEV","_jsxDEV","LanguageContext","LanguageProvider","children","_s","language","setLanguage","localStorage","getItem","languageData","setLanguageData","fetchLanguageData","dataUrl","fetch","then","response","json","data","setItem","catch","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/store/languageContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { changeLanguage } from '../'; // Importation de la fonction de changement de langue\r\n\r\n// Création du contexte pour la langue\r\nconst LanguageContext = createContext();\r\n\r\n// Provider pour gérer la langue et les traductions\r\nconst LanguageProvider = ({ children }) => {\r\n    const [language, setLanguage] = useState(localStorage.getItem('lang') || 'en');\r\n    const [languageData, setLanguageData] = useState({});\r\n\r\n    // Charger les données de traduction\r\n    useEffect(() => {\r\n        // Charger les données de langue à partir du fichier JSON ou autre source\r\n        fetchLanguageData();\r\n    }, []);\r\n\r\n    // Charger les données de langue chaque fois que la langue change\r\n    useEffect(() => {\r\n        fetchLanguageData();\r\n        // Appliquer la traduction aux éléments HTML (même sans recharger la page)\r\n        changeLanguage(language);\r\n    }, [language]);\r\n\r\n    const fetchLanguageData = () => {\r\n        const dataUrl = `/locales/${language}.json`;  // Adaptez selon votre structure de fichiers\r\n        fetch(dataUrl)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setLanguageData(data);\r\n                localStorage.setItem('lang', language); // Sauvegarder la langue dans localStorage\r\n            })\r\n            .catch((error) => console.error('Erreur de chargement des données de langue:', error));\r\n    };\r\n\r\n    return (\r\n        <LanguageContext.Provider value={{ language, setLanguage, languageData }}>\r\n            {children}\r\n        </LanguageContext.Provider>\r\n    );\r\n};\r\n\r\n// Hook pour accéder au contexte de la langue\r\nexport const useLanguage = () => useContext(LanguageContext);\r\n\r\nexport { LanguageContext, LanguageProvider };\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,cAAc,QAAQ,KAAK,CAAC,CAAC;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,gBAAGP,aAAa,CAAC,CAAC;;AAEvC;AACA,MAAMQ,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;EAC9E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACZ;IACAe,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAf,SAAS,CAAC,MAAM;IACZe,iBAAiB,CAAC,CAAC;IACnB;IACAb,cAAc,CAACO,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,OAAO,GAAG,YAAYP,QAAQ,OAAO,CAAC,CAAE;IAC9CQ,KAAK,CAACD,OAAO,CAAC,CACTE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACZP,eAAe,CAACO,IAAI,CAAC;MACrBV,YAAY,CAACW,OAAO,CAAC,MAAM,EAAEb,QAAQ,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,CACDc,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC,CAAC;EAC9F,CAAC;EAED,oBACIpB,OAAA,CAACC,eAAe,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,QAAQ;MAAEC,WAAW;MAAEG;IAAa,CAAE;IAAAN,QAAA,EACpEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;;AAED;AAAAvB,EAAA,CAnCMF,gBAAgB;AAAA0B,EAAA,GAAhB1B,gBAAgB;AAoCtB,OAAO,MAAM2B,WAAW,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjC,UAAU,CAACI,eAAe,CAAC;AAAA;AAAC6B,GAAA,CAAhDD,WAAW;AAExB,SAAS5B,eAAe,EAAEC,gBAAgB;AAAG,IAAA0B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}