{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useLanguage}from'../../store/languageContext';// Définition du composant ListeMot\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ListeMot=()=>{const mots=[{mot:'Chicken'},{mot:'Glaucous'},{mot:'Pip squeak'},{mot:'Inspiration'},{mot:'Cockerel'}];const[definitions,setDefinitions]=useState({});const[translatedMots,setTranslatedMots]=useState({});const{language,languageData}=useLanguage();//const [langCurrent, setLangCurrent] = useState(localStorage.getItem('lang') || 'fr');\n// Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\nconst fetchDefinitionFromDictionaryAPI=async mot=>{const url=`https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;try{var _data$,_data$$meanings$,_data$$meanings$$defi;const response=await fetch(url);const data=await response.json();const definition=((_data$=data[0])===null||_data$===void 0?void 0:(_data$$meanings$=_data$.meanings[0])===null||_data$$meanings$===void 0?void 0:(_data$$meanings$$defi=_data$$meanings$.definitions[0])===null||_data$$meanings$$defi===void 0?void 0:_data$$meanings$$defi.definition)||'Définition introuvable';setDefinitions(prevDefinitions=>({...prevDefinitions,[mot]:definition}));}catch(error){console.error(`Erreur lors du chargement de la définition pour ${mot}:`,error);setDefinitions(prevDefinitions=>({...prevDefinitions,[mot]:'Erreur de chargement'}));}};// Fonction pour traduire un texte via l'API Google Translate\nconst translateText=async(text,targetLang)=>{const sourceLang='en';const url=`https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;try{var _data$2,_data$2$;const response=await fetch(url);const data=await response.json();return(data===null||data===void 0?void 0:(_data$2=data[0])===null||_data$2===void 0?void 0:(_data$2$=_data$2[0])===null||_data$2$===void 0?void 0:_data$2$[0])||text;}catch(error){console.error('Erreur lors de la traduction:',error);return text;}};// Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\nconst fetchTranslations=async()=>{if(/*langCurrent*/language==='en'){setTranslatedMots(mots.reduce((acc,_ref)=>{let{mot}=_ref;return{...acc,[mot]:mot};},{}));}else{const translated={};await Promise.all(mots.map(async _ref2=>{let{mot}=_ref2;translated[mot]=await translateText(mot,/*langCurrent*/language);}));setTranslatedMots(translated);}const translatedDef={};await Promise.all(Object.keys(definitions).map(async mot=>{const translatedDefinition=await translateText(definitions[mot],/*langCurrent*/language);translatedDef[mot]=translatedDefinition;}));setDefinitions(prevDefinitions=>({...prevDefinitions,...translatedDef}));};const supprFavoris=item=>{console.log(\"coeur cliqué !\");document.getElementById(item.mot).className=document.getElementById(item.mot).className===\"bi bi-suit-heart-fill\"?\"bi bi-suit-heart\":\"bi bi-suit-heart-fill\";};useEffect(()=>{const fetchData=async()=>{try{await Promise.all(mots.map(_ref3=>{let{mot}=_ref3;return fetchDefinitionFromDictionaryAPI(mot);}));await fetchTranslations();}catch(error){console.error('Erreur lors du chargement des données:',error);}};fetchData();},[/*langCurrent*/language]);/*\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      const newLang = localStorage.getItem('lang') || 'fr';\r\n      setLangCurrent(newLang);\r\n      console.log('Langue actuelle:', newLang);\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, []);*/useEffect(()=>{const loadGoogleTranslate=()=>{if(!window.google){const script=document.createElement('script');script.src=\"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";script.async=true;script.onerror=()=>console.error(\"Erreur lors du chargement du script Google Translate\");document.body.appendChild(script);}else{initializeGoogleTranslate();}};const initializeGoogleTranslate=()=>{if(typeof window.googleTranslateElementInit===\"function\"){new window.google.translate.TranslateElement({pageLanguage:/*langCurrent*/language},\"google_translate_element\");}else{console.error('La fonction googleTranslateElementInit n\\'est pas définie');}};if(window.google&&window.google.translate){initializeGoogleTranslate();}else{loadGoogleTranslate();}},[/*langCurrent*/language]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{id:\"google_translate_element\"}),mots.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"wrapper\",children:[/*#__PURE__*/_jsx(\"h1\",{children:translatedMots[item.mot]||item.mot}),/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-suit-heart-fill\",id:item.mot,onClick:()=>supprFavoris(item)}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"D\\xE9finition:\"}),\" \",definitions[item.mot]||'Chargement...']})]},index))]});};export default ListeMot;","map":{"version":3,"names":["React","useEffect","useState","useLanguage","jsx","_jsx","jsxs","_jsxs","ListeMot","mots","mot","definitions","setDefinitions","translatedMots","setTranslatedMots","language","languageData","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","response","fetch","data","json","definition","meanings","prevDefinitions","error","console","translateText","text","targetLang","sourceLang","encodeURI","_data$2","_data$2$","fetchTranslations","reduce","acc","_ref","translated","Promise","all","map","_ref2","translatedDef","Object","keys","translatedDefinition","supprFavoris","item","log","document","getElementById","className","fetchData","_ref3","loadGoogleTranslate","window","google","script","createElement","src","async","onerror","body","appendChild","initializeGoogleTranslate","googleTranslateElementInit","translate","TranslateElement","pageLanguage","children","id","index","onClick"],"sources":["C:/xampp/htdocs/word-box/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLanguage } from '../../store/languageContext';\r\n\r\n// Définition du composant ListeMot\r\nconst ListeMot = () => {\r\n  const mots = [\r\n    { mot: 'Chicken' },\r\n    { mot: 'Glaucous' },\r\n    { mot: 'Pip squeak' },\r\n    { mot: 'Inspiration' },\r\n    { mot: 'Cockerel' },\r\n  ];\r\n\r\n  const [definitions, setDefinitions] = useState({});\r\n  const [translatedMots, setTranslatedMots] = useState({});\r\n  const { language, languageData } = useLanguage();\r\n  //const [langCurrent, setLangCurrent] = useState(localStorage.getItem('lang') || 'fr');\r\n\r\n  // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\r\n  const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const definition = data[0]?.meanings[0]?.definitions[0]?.definition || 'Définition introuvable';\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        [mot]: definition,\r\n      }));\r\n    } catch (error) {\r\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        [mot]: 'Erreur de chargement',\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire un texte via l'API Google Translate\r\n  const translateText = async (text, targetLang) => {\r\n    const sourceLang = 'en';\r\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      return data?.[0]?.[0]?.[0] || text;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la traduction:', error);\r\n      return text;\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\r\n  const fetchTranslations = async () => {\r\n    if (/*langCurrent*/ language === 'en') {\r\n      setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n    } else {\r\n      const translated = {};\r\n      await Promise.all(\r\n        mots.map(async ({ mot }) => {\r\n          translated[mot] = await translateText(mot, /*langCurrent*/language);\r\n        })\r\n      );\r\n      setTranslatedMots(translated);\r\n    }\r\n\r\n    const translatedDef = {};\r\n    await Promise.all(\r\n      Object.keys(definitions).map(async (mot) => {\r\n        const translatedDefinition = await translateText(definitions[mot], /*langCurrent*/language);\r\n        translatedDef[mot] = translatedDefinition;\r\n      })\r\n    );\r\n    setDefinitions((prevDefinitions) => ({\r\n      ...prevDefinitions,\r\n      ...translatedDef,\r\n    }));\r\n  };\r\n\r\n  const supprFavoris = ((item) => {\r\n    console.log(\"coeur cliqué !\");\r\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\r\n});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n        await fetchTranslations();\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [/*langCurrent*/language]);\r\n/*\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      const newLang = localStorage.getItem('lang') || 'fr';\r\n      setLangCurrent(newLang);\r\n      console.log('Langue actuelle:', newLang);\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, []);*/\r\n\r\n  useEffect(() => {\r\n    const loadGoogleTranslate = () => {\r\n      if (!window.google) {\r\n        const script = document.createElement('script');\r\n        script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\r\n        script.async = true;\r\n        script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\r\n        document.body.appendChild(script);\r\n      } else {\r\n        initializeGoogleTranslate();\r\n      }\r\n    };\r\n\r\n    const initializeGoogleTranslate = () => {\r\n      if (typeof window.googleTranslateElementInit === \"function\") {\r\n        new window.google.translate.TranslateElement({\r\n          pageLanguage: /*langCurrent*/language,\r\n        }, \"google_translate_element\");\r\n      } else {\r\n        console.error('La fonction googleTranslateElementInit n\\'est pas définie');\r\n      }\r\n    };\r\n\r\n    if (window.google && window.google.translate) {\r\n      initializeGoogleTranslate();\r\n    } else {\r\n      loadGoogleTranslate();\r\n    }\r\n  }, [/*langCurrent*/language]);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"google_translate_element\"></div>\r\n      {mots.map((item, index) => (\r\n        <div key={index} className=\"wrapper\">\r\n          <h1>{translatedMots[item.mot] || item.mot}</h1>\r\n          <i className=\"bi bi-suit-heart-fill\" id={item.mot} onClick={() => supprFavoris(item)}></i>\r\n          <p><strong>Définition:</strong> {definitions[item.mot] || 'Chargement...'}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}