{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  const mots = [{\n    mot: \"Chicken\"\n  }, {\n    mot: \"Glaucous\"\n  }, {\n    mot: \"Pip squeak\"\n  }, {\n    mot: \"Inspiration\"\n  }, {\n    mot: \"Cockerel\"\n  }];\n  const [definitions, setDefinitions] = useState({});\n  // const [translatedMots, setTranslatedMots] = useState({});\n  const [langCurrent, setLangCurrent] = useState(localStorage.getItem(\"lang\") || \"fr\");\n  console.log('Langue actuelle au début :', langCurrent);\n\n  /*const translateText = async (text, targetLang) => {\r\n      const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\r\n        try {\r\n          const response = await fetch(LIBRETRANSLATE_URL, {\r\n              method: 'POST',\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({\r\n                  q: text,\r\n                  source: 'en',\r\n                  target: targetLang,\r\n                  format: 'text',\r\n              }),\r\n          });\r\n            if (!response.ok) {\r\n              console.error(`Erreur HTTP: ${response.statusText}`);\r\n              return text;\r\n          }\r\n            const data = await response.json();\r\n          return data.translatedText || text;\r\n      } catch (error) {\r\n          console.error('Erreur lors de la requête LibreTranslate:', error);\r\n          return text;\r\n      }\r\n  };*/\n\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || \"Définition introuvable\";\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: \"Erreur de chargement\"\n      }));\n    }\n  };\n\n  /*\r\n  const fetchTranslations = async () => {\r\n      if (langCurrent === 'en') {\r\n          setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n      } else {\r\n          const translated = {};\r\n          await Promise.all(\r\n              mots.map(async ({ mot }) => {\r\n                  translated[mot] = await translateText(mot, langCurrent);\r\n              })\r\n          );\r\n          setTranslatedMots(translated);\r\n      }\r\n  };*/\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await Promise.all(mots.map(({\n          mot\n        }) => fetchDefinitionFromDictionaryAPI(mot)));\n        //await fetchTranslations();\n      } catch (error) {\n        console.error('Erreur lors du chargement des données:', error);\n      }\n    };\n    fetchData();\n  }, [langCurrent]);\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newLang = localStorage.getItem(\"lang\") || \"fr\";\n      setLangCurrent(newLang);\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  // Charger Google Translate\n  useEffect(() => {\n    const loadGoogleTranslate = () => {\n      if (!window.google) {\n        const script = document.createElement('script');\n        script.src = \"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\n        script.async = true;\n        document.body.appendChild(script);\n      }\n    };\n    window.googleTranslateElementInit = () => {\n      if (window.google) {\n        new window.google.translate.TranslateElement({\n          pageLanguage: langCurrent\n        }, 'google_translate_element');\n      }\n    };\n    loadGoogleTranslate();\n  }, [langCurrent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"google_translate_element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: item.mot,\n        children: item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-suit-heart-fill\",\n        onClick: () => console.log(\"coeur cliqué !\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: definitions[item.mot] || \"Chargement...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(ListeMot, \"/cnB7tvDTf8F/vzDkj2bdzxY2NE=\");\n_c = ListeMot;\nexport default ListeMot;\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","langCurrent","setLangCurrent","localStorage","getItem","console","log","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","response","fetch","data","json","definition","meanings","prevDefinitions","error","fetchData","Promise","all","map","handleStorageChange","newLang","window","addEventListener","removeEventListener","loadGoogleTranslate","google","script","document","createElement","src","async","body","appendChild","googleTranslateElementInit","translate","TranslateElement","pageLanguage","children","id","fileName","_jsxFileName","lineNumber","columnNumber","item","index","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ListeMot = () => {\r\n    const mots = [\r\n        { mot: \"Chicken\" },\r\n        { mot: \"Glaucous\" },\r\n        { mot: \"Pip squeak\" },\r\n        { mot: \"Inspiration\" },\r\n        { mot: \"Cockerel\" }\r\n    ];\r\n\r\n    const [definitions, setDefinitions] = useState({});\r\n   // const [translatedMots, setTranslatedMots] = useState({});\r\n    const [langCurrent, setLangCurrent] = useState(localStorage.getItem(\"lang\") || \"fr\");\r\n\r\n    console.log('Langue actuelle au début :', langCurrent);\r\n\r\n    /*const translateText = async (text, targetLang) => {\r\n        const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\r\n\r\n        try {\r\n            const response = await fetch(LIBRETRANSLATE_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    q: text,\r\n                    source: 'en',\r\n                    target: targetLang,\r\n                    format: 'text',\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                console.error(`Erreur HTTP: ${response.statusText}`);\r\n                return text;\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data.translatedText || text;\r\n        } catch (error) {\r\n            console.error('Erreur lors de la requête LibreTranslate:', error);\r\n            return text;\r\n        }\r\n    };*/\r\n\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n        const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: definition\r\n            }));\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: \"Erreur de chargement\"\r\n            }));\r\n        }\r\n    };\r\n\r\n    /*\r\n    const fetchTranslations = async () => {\r\n        if (langCurrent === 'en') {\r\n            setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n        } else {\r\n            const translated = {};\r\n            await Promise.all(\r\n                mots.map(async ({ mot }) => {\r\n                    translated[mot] = await translateText(mot, langCurrent);\r\n                })\r\n            );\r\n            setTranslatedMots(translated);\r\n        }\r\n    };*/\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n                //await fetchTranslations();\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [langCurrent]);\r\n\r\n    useEffect(() => {\r\n        const handleStorageChange = () => {\r\n            const newLang = localStorage.getItem(\"lang\") || \"fr\";\r\n            setLangCurrent(newLang);\r\n        };\r\n\r\n        window.addEventListener('storage', handleStorageChange);\r\n        return () => {\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n    // Charger Google Translate\r\n    useEffect(() => {\r\n        const loadGoogleTranslate = () => {\r\n            if (!window.google) {\r\n                const script = document.createElement('script');\r\n                script.src = \"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\r\n                script.async = true;\r\n                document.body.appendChild(script);\r\n            }\r\n        };\r\n\r\n        window.googleTranslateElementInit = () => {\r\n            if (window.google) {\r\n                new window.google.translate.TranslateElement(\r\n                    { pageLanguage: langCurrent },\r\n                    'google_translate_element'\r\n                );\r\n            }\r\n        };\r\n\r\n        loadGoogleTranslate();\r\n    }, [langCurrent]);\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"google_translate_element\"></div>\r\n            {mots.map((item, index) => (\r\n                <div key={index} className=\"wrapper\">\r\n                    <h1 id={item.mot} >{item.mot}</h1>\r\n                    <i\r\n                        className=\"bi bi-suit-heart-fill\"\r\n                        onClick={() => console.log(\"coeur cliqué !\")}\r\n                    ></i>\r\n                    <p>{definitions[item.mot] || \"Chargement...\"}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}