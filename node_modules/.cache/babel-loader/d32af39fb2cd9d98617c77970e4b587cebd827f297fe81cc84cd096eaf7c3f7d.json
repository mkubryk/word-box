{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  // Liste des mots\n  const mots = [{\n    mot: \"Poulet\"\n  }, {\n    mot: \"Glauque\"\n  }, {\n    mot: \"Foutriquet\"\n  }, {\n    mot: \"Inspiration\"\n  }, {\n    mot: \"Coquelet\"\n  }];\n  const express = require('express');\n  const fetchDefinitionFromWiktionary1 = require('../../script/wiktionaryScraper');\n  const app = express();\n  const PORT = process.env.PORT || 3000;\n  app.get('/api/definition/:mot', async (req, res) => {\n    const {\n      mot\n    } = req.params;\n    try {\n      const data = await fetchDefinitionFromWiktionary1(mot);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({\n        error: \"Erreur de récupération des données\"\n      });\n    }\n  });\n  app.listen(PORT, () => {\n    console.log(`Serveur en cours d'exécution sur le port ${PORT}`);\n  });\n\n  // État pour stocker les définitions obtenues\n  const [definitions, setDefinitions] = useState({});\n\n  // Fonction pour récupérer la définition de chaque mot depuis l'API Wiktionnaire\n  const fetchDefinitionFromWiktionary = async mot => {\n    const url = `https://fr.wiktionary.org/w/api.php?action=query&titles=${mot}&prop=extracts&exintro&explaintext&format=json&origin=*`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const page = data.query.pages[Object.keys(data.query.pages)[0]];\n      const definition = page.extract || null; // null si aucune définition trouvée\n\n      // Si une définition est trouvée, on la stocke\n      if (definition) {\n        setDefinitions(prevDefinitions => ({\n          ...prevDefinitions,\n          [mot]: definition\n        }));\n      } else {\n        // Si aucune définition trouvée, essayer une autre API\n        //fetchDefinitionFromDictionaryAPI(mot);\n      }\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot} depuis Wiktionnaire:`, error);\n      // fetchDefinitionFromDictionaryAPI(mot); // Si erreur, tenter l'autre API\n    }\n  };\n\n  /*\r\n  // Fonction de secours pour récupérer la définition de chaque mot depuis DictionaryAPI.dev\r\n  const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n      const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n      try {\r\n          const response = await fetch(url);\r\n          const data = await response.json();\r\n          const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n          setDefinitions((prevDefinitions) => ({\r\n              ...prevDefinitions,\r\n              [mot]: definition\r\n          }));\r\n      } catch (error) {\r\n          console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\r\n          setDefinitions((prevDefinitions) => ({\r\n              ...prevDefinitions,\r\n              [mot]: \"Erreur de chargement\"\r\n          }));\r\n      }\r\n  };*/\n\n  // Appel des fonctions de récupération de définition pour chaque mot\n  useEffect(() => {\n    mots.forEach(({\n      mot\n    }) => {\n      fetchDefinitionFromWiktionary(mot);\n    });\n  }, []);\n  const supprFavoris = item => {\n    console.log(\"coeur cliqué !\");\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-suit-heart-fill\",\n        id: item.mot,\n        onClick: () => supprFavoris(item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: definitions[item.mot] || \"Chargement...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(ListeMot, \"OwFWGDSjAnduEmM/ooUiJJ2ZccY=\");\n_c = ListeMot;\nexport default ListeMot;\n\n/*\r\n* Rédiger méthode qui lorsque qu'on clique sur le coeur, le mot est supprimé de la liste des favoris\r\n*\r\n*\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","express","require","fetchDefinitionFromWiktionary1","app","PORT","process","env","get","req","res","params","data","json","error","status","listen","console","log","definitions","setDefinitions","fetchDefinitionFromWiktionary","url","response","fetch","page","query","pages","Object","keys","definition","extract","prevDefinitions","forEach","supprFavoris","item","document","getElementById","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ListeMot = () => {\r\n    \r\n    // Liste des mots\r\n    const mots = [\r\n        { mot: \"Poulet\" },\r\n        { mot: \"Glauque\" },\r\n        { mot: \"Foutriquet\" },\r\n        { mot: \"Inspiration\" },\r\n        { mot: \"Coquelet\" }\r\n    ];\r\n\r\n    const express = require('express');\r\n    const fetchDefinitionFromWiktionary1 = require('../../script/wiktionaryScraper');\r\n    \r\n    const app = express();\r\n    const PORT = process.env.PORT || 3000;\r\n    \r\n    app.get('/api/definition/:mot', async (req, res) => {\r\n        const { mot } = req.params;\r\n        try {\r\n            const data = await fetchDefinitionFromWiktionary1(mot);\r\n            res.json(data);\r\n        } catch (error) {\r\n            res.status(500).json({ error: \"Erreur de récupération des données\" });\r\n        }\r\n    });\r\n    \r\n    app.listen(PORT, () => {\r\n        console.log(`Serveur en cours d'exécution sur le port ${PORT}`);\r\n    });\r\n    \r\n\r\n\r\n\r\n    // État pour stocker les définitions obtenues\r\n    const [definitions, setDefinitions] = useState({});\r\n\r\n    // Fonction pour récupérer la définition de chaque mot depuis l'API Wiktionnaire\r\n    const fetchDefinitionFromWiktionary = async (mot) => {\r\n        const url = `https://fr.wiktionary.org/w/api.php?action=query&titles=${mot}&prop=extracts&exintro&explaintext&format=json&origin=*`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const page = data.query.pages[Object.keys(data.query.pages)[0]];\r\n            const definition = page.extract || null; // null si aucune définition trouvée\r\n\r\n            // Si une définition est trouvée, on la stocke\r\n            if (definition) {\r\n                setDefinitions((prevDefinitions) => ({\r\n                    ...prevDefinitions,\r\n                    [mot]: definition\r\n                }));\r\n            } else {\r\n                // Si aucune définition trouvée, essayer une autre API\r\n                //fetchDefinitionFromDictionaryAPI(mot);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis Wiktionnaire:`, error);\r\n           // fetchDefinitionFromDictionaryAPI(mot); // Si erreur, tenter l'autre API\r\n        }\r\n    };\r\n\r\n    /*\r\n    // Fonction de secours pour récupérer la définition de chaque mot depuis DictionaryAPI.dev\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n        const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: definition\r\n            }));\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: \"Erreur de chargement\"\r\n            }));\r\n        }\r\n    };*/\r\n\r\n    // Appel des fonctions de récupération de définition pour chaque mot\r\n    useEffect(() => {\r\n        mots.forEach(({ mot }) => {\r\n            fetchDefinitionFromWiktionary(mot);\r\n        });\r\n    }, []);\r\n\r\n    const supprFavoris = ((item) => {\r\n        console.log(\"coeur cliqué !\");\r\n        document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\r\n    }); \r\n\r\n    return (\r\n        <div>\r\n    \r\n            {mots.map((item, index) => (\r\n                <div key={index} className=\"wrapper\">\r\n                   <h1>{item.mot}</h1>\r\n                    <i className=\"bi bi-suit-heart-fill\" id={item.mot} onClick={() => supprFavoris(item)}></i>\r\n                    <p>{definitions[item.mot] || \"Chargement...\"}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListeMot;\r\n\r\n\r\n/*\r\n* Rédiger méthode qui lorsque qu'on clique sur le coeur, le mot est supprimé de la liste des favoris\r\n*\r\n*\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}