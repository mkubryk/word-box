{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  // Liste des mots\n  const mots = [{\n    mot: \"Chicken\"\n  }, {\n    mot: \"Glaucous\"\n  }, {\n    mot: \"Pip squeak\"\n  }, {\n    mot: \"Inspiration\"\n  }, {\n    mot: \"Cockerel\"\n  }];\n\n  // État pour stocker les définitions obtenues\n  const [definitions, setDefinitions] = useState({});\n  const [translatedMots, setTranslatedMots] = useState({});\n  let langCurrent = localStorage.getItem(\"lang\") || \"fr\";\n  const translateText = async (text, targetLang) => {\n    const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\n    try {\n      const response = await fetch(LIBRETRANSLATE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          q: text,\n          source: 'en',\n          target: targetLang,\n          format: 'text'\n        })\n      });\n      console.log(`Statut HTTP: ${response.status}`);\n      if (!response.ok) {\n        console.error(`Erreur HTTP: ${response.statusText}`);\n        return text;\n      }\n      const data = await response.json();\n      console.log('Réponse de LibreTranslate:', data);\n      return data.translatedText || text;\n    } catch (error) {\n      console.error('Erreur lors de la requête LibreTranslate:', error);\n      return text;\n    }\n  };\n\n  // Fonction pour récupérer la définition de chaque mot depuis l'API DictionaryAPI.dev\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || \"Définition introuvable\";\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: \"Erreur de chargement\"\n      }));\n    }\n  };\n\n  // Fonction pour traduire les mots en fonction de la langue choisie\n  const fetchTranslations = async () => {\n    if (langCurrent === 'en') {\n      setTranslatedMots(mots.reduce((acc, {\n        mot\n      }) => ({\n        ...acc,\n        [mot]: mot\n      }), {}));\n    } else {\n      const translated = {};\n      for (const {\n        mot\n      } of mots) {\n        translated[mot] = await translateText(mot, langCurrent);\n      }\n      setTranslatedMots(translated);\n    }\n  };\n\n  // Récupérer les définitions et traductions au chargement du composant\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        mots.forEach(({\n          mot\n        }) => {\n          fetchDefinitionFromDictionaryAPI(mot);\n        });\n        await fetchTranslations();\n      } catch (error) {\n        console.error('Erreur lors du chargement des données:', error);\n      }\n    };\n    fetchData();\n  }, [langCurrent]);\n  const supprFavoris = item => {\n    console.log(\"coeur cliqué !\");\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: translatedMots[item.mot] || item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-suit-heart-fill\",\n        id: item.mot,\n        onClick: () => supprFavoris(item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: definitions[item.mot] || \"Chargement...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(ListeMot, \"nVlhywkuUXtDPaO3IOh2c9lqYo0=\");\n_c = ListeMot;\nexport default ListeMot;\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","translatedMots","setTranslatedMots","langCurrent","localStorage","getItem","translateText","text","targetLang","LIBRETRANSLATE_URL","response","fetch","method","headers","body","JSON","stringify","q","source","target","format","console","log","status","ok","error","statusText","data","json","translatedText","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","definition","meanings","prevDefinitions","fetchTranslations","reduce","acc","translated","fetchData","forEach","supprFavoris","item","document","getElementById","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ListeMot = () => {\r\n    // Liste des mots\r\n    const mots = [\r\n        { mot: \"Chicken\" },\r\n        { mot: \"Glaucous\" },\r\n        { mot: \"Pip squeak\" },\r\n        { mot: \"Inspiration\" },\r\n        { mot: \"Cockerel\" }\r\n    ];\r\n\r\n    // État pour stocker les définitions obtenues\r\n    const [definitions, setDefinitions] = useState({});\r\n    const [translatedMots, setTranslatedMots] = useState({});\r\n    let langCurrent = localStorage.getItem(\"lang\") || \"fr\";\r\n\r\n    const translateText = async (text, targetLang) => {\r\n        const LIBRETRANSLATE_URL = 'https://libretranslate.com/translate';\r\n    \r\n        try {\r\n            const response = await fetch(LIBRETRANSLATE_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    q: text,\r\n                    source: 'en',\r\n                    target: targetLang,\r\n                    format: 'text',\r\n                }),\r\n            });\r\n    \r\n            console.log(`Statut HTTP: ${response.status}`);\r\n    \r\n            if (!response.ok) {\r\n                console.error(`Erreur HTTP: ${response.statusText}`);\r\n                return text;\r\n            }\r\n    \r\n            const data = await response.json();\r\n            console.log('Réponse de LibreTranslate:', data);\r\n    \r\n            return data.translatedText || text;\r\n        } catch (error) {\r\n            console.error('Erreur lors de la requête LibreTranslate:', error);\r\n            return text;\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    // Fonction pour récupérer la définition de chaque mot depuis l'API DictionaryAPI.dev\r\n    const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n        const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const definition = data[0]?.meanings[0]?.definitions[0]?.definition || \"Définition introuvable\";\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: definition\r\n            }));\r\n        } catch (error) {\r\n            console.error(`Erreur lors du chargement de la définition pour ${mot} depuis DictionaryAPI.dev:`, error);\r\n            setDefinitions((prevDefinitions) => ({\r\n                ...prevDefinitions,\r\n                [mot]: \"Erreur de chargement\"\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Fonction pour traduire les mots en fonction de la langue choisie\r\n    const fetchTranslations = async () => {\r\n        if (langCurrent === 'en') {\r\n            setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n        } else {\r\n            const translated = {};\r\n            for (const { mot } of mots) {\r\n                translated[mot] = await translateText(mot, langCurrent);\r\n            }\r\n            setTranslatedMots(translated);\r\n        }\r\n    };\r\n    \r\n\r\n    // Récupérer les définitions et traductions au chargement du composant\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                mots.forEach(({ mot }) => {\r\n                    fetchDefinitionFromDictionaryAPI(mot);\r\n                });\r\n                await fetchTranslations();\r\n            } catch (error) {\r\n                console.error('Erreur lors du chargement des données:', error);\r\n            }\r\n        };\r\n    \r\n        fetchData();\r\n    }, [langCurrent]);\r\n    \r\n\r\n    const supprFavoris = (item) => {\r\n        console.log(\"coeur cliqué !\");\r\n        document.getElementById(item.mot).className =\r\n            document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\"\r\n                ? \"bi bi-suit-heart\"\r\n                : \"bi bi-suit-heart-fill\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {mots.map((item, index) => (\r\n                <div key={index} className=\"wrapper\">\r\n                    <h1>{translatedMots[item.mot] || item.mot}</h1>\r\n                    <i\r\n                        className=\"bi bi-suit-heart-fill\"\r\n                        id={item.mot}\r\n                        onClick={() => supprFavoris(item)}\r\n                    ></i>\r\n                    <p>{definitions[item.mot] || \"Chargement...\"}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}