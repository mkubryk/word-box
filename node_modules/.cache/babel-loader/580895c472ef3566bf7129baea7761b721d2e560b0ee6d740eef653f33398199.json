{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\melis\\\\OneDrive\\\\Documents\\\\ENSIIE\\\\S1\\\\web\\\\PROJET-1\\\\boite-a-mot\\\\WordBox\\\\src\\\\pages\\\\ListeMot\\\\ListeMot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLanguage } from '../store/languageContext';\n\n// Définition du composant ListeMot\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListeMot = () => {\n  _s();\n  const mots = [{\n    mot: 'Chicken'\n  }, {\n    mot: 'Glaucous'\n  }, {\n    mot: 'Pip squeak'\n  }, {\n    mot: 'Inspiration'\n  }, {\n    mot: 'Cockerel'\n  }];\n  const [definitions, setDefinitions] = useState({});\n  const [translatedMots, setTranslatedMots] = useState({});\n  const {\n    language,\n    languageData\n  } = useLanguage();\n  //const [langCurrent, setLangCurrent] = useState(localStorage.getItem('lang') || 'fr');\n\n  // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\n  const fetchDefinitionFromDictionaryAPI = async mot => {\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\n    try {\n      var _data$, _data$$meanings$, _data$$meanings$$defi;\n      const response = await fetch(url);\n      const data = await response.json();\n      const definition = ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$meanings$ = _data$.meanings[0]) === null || _data$$meanings$ === void 0 ? void 0 : (_data$$meanings$$defi = _data$$meanings$.definitions[0]) === null || _data$$meanings$$defi === void 0 ? void 0 : _data$$meanings$$defi.definition) || 'Définition introuvable';\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: definition\n      }));\n    } catch (error) {\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\n      setDefinitions(prevDefinitions => ({\n        ...prevDefinitions,\n        [mot]: 'Erreur de chargement'\n      }));\n    }\n  };\n\n  // Fonction pour traduire un texte via l'API Google Translate\n  const translateText = async (text, targetLang) => {\n    const sourceLang = 'en';\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\n    try {\n      var _data$2, _data$2$;\n      const response = await fetch(url);\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : (_data$2$ = _data$2[0]) === null || _data$2$ === void 0 ? void 0 : _data$2$[0]) || text;\n    } catch (error) {\n      console.error('Erreur lors de la traduction:', error);\n      return text;\n    }\n  };\n\n  // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\n  const fetchTranslations = async () => {\n    if (langCurrent === 'en') {\n      setTranslatedMots(mots.reduce((acc, {\n        mot\n      }) => ({\n        ...acc,\n        [mot]: mot\n      }), {}));\n    } else {\n      const translated = {};\n      await Promise.all(mots.map(async ({\n        mot\n      }) => {\n        translated[mot] = await translateText(mot, /*langCurrent*/language);\n      }));\n      setTranslatedMots(translated);\n    }\n    const translatedDef = {};\n    await Promise.all(Object.keys(definitions).map(async mot => {\n      const translatedDefinition = await translateText(definitions[mot], langCurrent);\n      translatedDef[mot] = translatedDefinition;\n    }));\n    setDefinitions(prevDefinitions => ({\n      ...prevDefinitions,\n      ...translatedDef\n    }));\n  };\n  const supprFavoris = item => {\n    console.log(\"coeur cliqué !\");\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        await Promise.all(mots.map(({\n          mot\n        }) => fetchDefinitionFromDictionaryAPI(mot)));\n        await fetchTranslations();\n      } catch (error) {\n        console.error('Erreur lors du chargement des données:', error);\n      }\n    };\n    fetchData();\n  }, [/*langCurrent*/language]);\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newLang = localStorage.getItem('lang') || 'fr';\n      setLangCurrent(newLang);\n      console.log('Langue actuelle:', newLang);\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  useEffect(() => {\n    const loadGoogleTranslate = () => {\n      if (!window.google) {\n        const script = document.createElement('script');\n        script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\n        script.async = true;\n        script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\n        document.body.appendChild(script);\n      } else {\n        initializeGoogleTranslate();\n      }\n    };\n    const initializeGoogleTranslate = () => {\n      if (typeof window.googleTranslateElementInit === \"function\") {\n        new window.google.translate.TranslateElement({\n          pageLanguage: langCurrent\n        }, \"google_translate_element\");\n      } else {\n        console.error('La fonction googleTranslateElementInit n\\'est pas définie');\n      }\n    };\n    if (window.google && window.google.translate) {\n      initializeGoogleTranslate();\n    } else {\n      loadGoogleTranslate();\n    }\n  }, [langCurrent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"google_translate_element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), mots.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: translatedMots[item.mot] || item.mot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-suit-heart-fill\",\n        id: item.mot,\n        onClick: () => supprFavoris(item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"D\\xE9finition:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 14\n        }, this), \" \", definitions[item.mot] || 'Chargement...']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(ListeMot, \"bgejZNiJrxrBbN9BZigZyUcdB0k=\", false, function () {\n  return [useLanguage];\n});\n_c = ListeMot;\nexport default ListeMot;\nvar _c;\n$RefreshReg$(_c, \"ListeMot\");","map":{"version":3,"names":["React","useEffect","useState","useLanguage","jsxDEV","_jsxDEV","ListeMot","_s","mots","mot","definitions","setDefinitions","translatedMots","setTranslatedMots","language","languageData","fetchDefinitionFromDictionaryAPI","url","_data$","_data$$meanings$","_data$$meanings$$defi","response","fetch","data","json","definition","meanings","prevDefinitions","error","console","translateText","text","targetLang","sourceLang","encodeURI","_data$2","_data$2$","fetchTranslations","langCurrent","reduce","acc","translated","Promise","all","map","translatedDef","Object","keys","translatedDefinition","supprFavoris","item","log","document","getElementById","className","fetchData","handleStorageChange","newLang","localStorage","getItem","setLangCurrent","window","addEventListener","removeEventListener","loadGoogleTranslate","google","script","createElement","src","async","onerror","body","appendChild","initializeGoogleTranslate","googleTranslateElementInit","translate","TranslateElement","pageLanguage","children","id","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/melis/OneDrive/Documents/ENSIIE/S1/web/PROJET-1/boite-a-mot/WordBox/src/pages/ListeMot/ListeMot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLanguage } from '../store/languageContext';\r\n\r\n// Définition du composant ListeMot\r\nconst ListeMot = () => {\r\n  const mots = [\r\n    { mot: 'Chicken' },\r\n    { mot: 'Glaucous' },\r\n    { mot: 'Pip squeak' },\r\n    { mot: 'Inspiration' },\r\n    { mot: 'Cockerel' },\r\n  ];\r\n\r\n  const [definitions, setDefinitions] = useState({});\r\n  const [translatedMots, setTranslatedMots] = useState({});\r\n  const { language, languageData } = useLanguage();\r\n  //const [langCurrent, setLangCurrent] = useState(localStorage.getItem('lang') || 'fr');\r\n\r\n  // Fonction pour récupérer la définition d'un mot via l'API DictionaryAPI\r\n  const fetchDefinitionFromDictionaryAPI = async (mot) => {\r\n    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${mot}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      const definition = data[0]?.meanings[0]?.definitions[0]?.definition || 'Définition introuvable';\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        [mot]: definition,\r\n      }));\r\n    } catch (error) {\r\n      console.error(`Erreur lors du chargement de la définition pour ${mot}:`, error);\r\n      setDefinitions((prevDefinitions) => ({\r\n        ...prevDefinitions,\r\n        [mot]: 'Erreur de chargement',\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire un texte via l'API Google Translate\r\n  const translateText = async (text, targetLang) => {\r\n    const sourceLang = 'en';\r\n    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURI(text)}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      return data?.[0]?.[0]?.[0] || text;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la traduction:', error);\r\n      return text;\r\n    }\r\n  };\r\n\r\n  // Fonction pour traduire tous les mots et leurs définitions en fonction de la langue choisie\r\n  const fetchTranslations = async () => {\r\n    if (langCurrent === 'en') {\r\n      setTranslatedMots(mots.reduce((acc, { mot }) => ({ ...acc, [mot]: mot }), {}));\r\n    } else {\r\n      const translated = {};\r\n      await Promise.all(\r\n        mots.map(async ({ mot }) => {\r\n          translated[mot] = await translateText(mot, /*langCurrent*/language);\r\n        })\r\n      );\r\n      setTranslatedMots(translated);\r\n    }\r\n\r\n    const translatedDef = {};\r\n    await Promise.all(\r\n      Object.keys(definitions).map(async (mot) => {\r\n        const translatedDefinition = await translateText(definitions[mot], langCurrent);\r\n        translatedDef[mot] = translatedDefinition;\r\n      })\r\n    );\r\n    setDefinitions((prevDefinitions) => ({\r\n      ...prevDefinitions,\r\n      ...translatedDef,\r\n    }));\r\n  };\r\n\r\n  const supprFavoris = ((item) => {\r\n    console.log(\"coeur cliqué !\");\r\n    document.getElementById(item.mot).className = document.getElementById(item.mot).className === \"bi bi-suit-heart-fill\" ? \"bi bi-suit-heart\" : \"bi bi-suit-heart-fill\";\r\n});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await Promise.all(mots.map(({ mot }) => fetchDefinitionFromDictionaryAPI(mot)));\r\n        await fetchTranslations();\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [/*langCurrent*/language]);\r\n\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      const newLang = localStorage.getItem('lang') || 'fr';\r\n      setLangCurrent(newLang);\r\n      console.log('Langue actuelle:', newLang);\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const loadGoogleTranslate = () => {\r\n      if (!window.google) {\r\n        const script = document.createElement('script');\r\n        script.src = \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\r\n        script.async = true;\r\n        script.onerror = () => console.error(\"Erreur lors du chargement du script Google Translate\");\r\n        document.body.appendChild(script);\r\n      } else {\r\n        initializeGoogleTranslate();\r\n      }\r\n    };\r\n\r\n    const initializeGoogleTranslate = () => {\r\n      if (typeof window.googleTranslateElementInit === \"function\") {\r\n        new window.google.translate.TranslateElement({\r\n          pageLanguage: langCurrent,\r\n        }, \"google_translate_element\");\r\n      } else {\r\n        console.error('La fonction googleTranslateElementInit n\\'est pas définie');\r\n      }\r\n    };\r\n\r\n    if (window.google && window.google.translate) {\r\n      initializeGoogleTranslate();\r\n    } else {\r\n      loadGoogleTranslate();\r\n    }\r\n  }, [langCurrent]);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"google_translate_element\"></div>\r\n      {mots.map((item, index) => (\r\n        <div key={index} className=\"wrapper\">\r\n          <h1>{translatedMots[item.mot] || item.mot}</h1>\r\n          <i className=\"bi bi-suit-heart-fill\" id={item.mot} onClick={() => supprFavoris(item)}></i>\r\n          <p><strong>Définition:</strong> {definitions[item.mot] || 'Chargement...'}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListeMot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}